package election.tally;

/**
 * The Ballot class represents a ballot paper in an Irish election,
 * which uses the Proportional Representation Single Transferable Vote
 * (PRSTV) system.
 * 
 * @author Dermot Cochran
 * @copyright 2005-2009
 * @reviewer Joe Kiniry
 * 
 * @see <a href="http://www.cev.ie/htm/tenders/pdf/1_2.pdf">Department of 
 * Environment and Local Government, Count Requirements and Commentary on Count 
 * Rules, sections 3-14</a>
 */

public class Ballot {
	
  /** 
   * Candidate ID value to use for nontransferable ballot papers.
   * 
   * @design A special candidate ID value is used to indicate
   *   non-transferable votes i.e., when the list of preferences has
   *   been exhausted and none of the continuing candidates are in the
   *   preference list, then the ballot is deemed to be nontransferable.
   *   
   * @see <a href="http://www.cev.ie/htm/tenders/pdf/1_2.pdf">Department of 
   * Environment and Local Government, Count Requirements and Commentary on Count 
   * Rules, section 7, pages 23-27</a> 
   */
  public static final int NONTRANSFERABLE;

  /** Preference list of candidate IDs */
  protected /*@ spec_public non_null @*/ int[] preferenceList;
  
  /** Total number of valid preferences on the ballot paper */
  //@ public invariant 0 <= numberOfPreferences;
  // @design numberOfPreferences == 0 means an empty ballot.
  protected /*@ spec_public @*/ int numberOfPreferences;
  
  /** Position within preference list */
  //@ public initially positionInList == 0;
  //@ public invariant 0 <= positionInList;
  //@ public invariant positionInList <= numberOfPreferences;
  //@ public constraint \old(positionInList) <= positionInList;
  protected /*@ spec_public @*/ int positionInList;
 

  /** Candidate ID to which the vote is assigned at the end of each count */
  protected /*@ spec_public non_null @*/ int[] candidateIDAtCount;
  
  /** Last count number in which this ballot was transfered */
  /*@ public invariant 0 <= countNumberAtLastTransfer;
    @ public initially countNumberAtLastTransfer == 0;
    @ public invariant countNumberAtLastTransfer <
    @   CountConfiguration.MAXCOUNT;
    @ public constraint \old(countNumberAtLastTransfer) <=
    @   countNumberAtLastTransfer;
    @*/
  protected /*@ spec_public @*/ int countNumberAtLastTransfer;

  /**
   * Default constructor
   */
  /*@ ensures numberOfPreferences == 0;
    @ ensures countNumberAtLastTransfer == 0;
    @ ensures positionInList == 0;
    @*/
  public Ballot();
  
  /**
   * Get the location of the ballot at each count
   * 
   * @param countNumber The round of counting which we need to check
   * @return The candidate ID or the NONTRANSFERABLE constant
   */    
  /*@ public normal_behavior
    @   requires 0 <= countNumber;
    @   requires countNumber <= countNumberAtLastTransfer;
    @   requires countNumber < candidateIDAtCount.length;
    @   ensures \result == candidateIDAtCount[countNumber];
    @
    @ public model pure int getPreferenceAtCount(final int countNumber) {
    @     return candidateIDAtCount[countNumber];
    @ }
    @*/
  
  /**
   * Get the count number for the last transfer of this ballot
   * 
   * @return The last count at which this ballot was transferred
   */    
  /*@ public normal_behavior
    @   ensures \result == countNumberAtLastTransfer;
    @
    @ public model pure int getCountNumberAtLastTransfer(){
    @    return countNumberAtLastTransfer;
    @ }
    @*/

  /**
   * Gets remaining number of preferences.
   * 
   * @return The number of preferences remaining
   */
  /*@
    @ public normal_behavior
    @   requires positionInList <= numberOfPreferences;
    @   ensures \result == numberOfPreferences - positionInList;
    @*/
  public /*@ pure @*/ int remainingPreferences();
  
}
