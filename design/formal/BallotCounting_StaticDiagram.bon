
static_diagram STATIC_DIAGRAM
component
  cluster TALLY_CLUSTER
  component

    effective class BALLOT_COUNTING
    inherit
      ABSTRACT_BALLOT_COUNTING
    feature
      make
      countStatus: COUNT_STATUS
        ensure
          Result /= Void;
        end
      getContinuingCandidates: INTEGER
        ensure
          Result /= Void;
          getNumberContinuing = Result;
        end
      getDepositSavingThreshold: INTEGER
        ensure
          Result /= Void;
        end
      getRemainingSeats: INTEGER
        ensure
          Result /= Void;
          totalRemainingSeats = Result;
        end
      count
        require
          state = PRECOUNT or state = COUNTING;
          -- \nonnullelements(candidateList);
        ensure
          delta {countNumberValue, ballotsToCount, candidateList, candidates, candidates, totalRemainingSeats, countStatus, savingThreshold, ballots, ballotsToCount, numberOfCandidatesElected, numberOfCandidatesEliminated, status, countStatus, remainingSeats, totalRemainingSeats};
          state = ElectionStatus.FINISHED;
        end
      distributeSurplus
        -> winner: INTEGER
        require
          winner /= Void;
          state = COUNTING;
          countStatus.getState = AbstractCountStatus.SURPLUS_AVAILABLE;
          isElected(candidateList.item(winner));
          0 <= winner;
          winner < candidateList.count;
          -- \nonnullelements(candidateList);
        end
      incrementCountNumber
        ensure
          delta countNumberValue;
          old(countNumberValue) + 1 = countNumberValue;
        end
      startCounting
        require
          state = PRECOUNT;
        ensure
          delta {state, countStatus, countNumberValue, totalRemainingSeats, savingThreshold, numberOfCandidatesElected, numberOfCandidatesEliminated};
          state = COUNTING;
        end
      transferVotes
        -> numberOfVotes: INTEGER
        -> fromCandidate: CANDIDATE
        -> toCandidate: CANDIDATE
        require
          numberOfVotes /= Void;
          fromCandidate /= Void;
          toCandidate /= Void;
          state = COUNTING;
          countStatus.getState = AbstractCountStatus.READY_TO_MOVE_BALLOTS;
        end
      updateCountStatus
        -> countingStatus: INTEGER
        require
          countingStatus /= Void;
          state = COUNTING;
          countStatus /= Void;
        ensure
          delta countStatus.substate;
        end
    feature{BALLOT_COUNTING}
      electCandidatesWithSurplus
        ensure
          delta {candidateList, ballotsToCount, candidates, numberOfCandidatesElected, totalRemainingSeats};
        end
      excludeLowestCandidates
        ensure
          delta {countStatus, countNumberValue, candidates, candidateList, numberOfCandidatesEliminated, ballots, ballotsToCount};
        end
      fillLastSeats
        ensure
          delta {candidateList, countNumber, countNumberValue, numberOfCandidatesElected, totalRemainingSeats, candidates};
        end
      moveSurplusBallots
        -> index: INTEGER
        -> winner: INTEGER
        require
          index /= Void;
          winner /= Void;
          0 <= index;
          index < candidateList.count;
          0 <= winner;
          winner < candidateList.count;
          -- \nonnullelements(candidateList);
        end
      removeNonTransferableBallots
        -> totalTransferableVotes: INTEGER
        -> winner: INTEGER
        -> surplus: INTEGER
        require
          totalTransferableVotes /= Void;
          winner /= Void;
          surplus /= Void;
          0 <= winner;
          winner < candidateList.count;
          -- \nonnullelements(candidateList);
          -- \nonnullelements(ballotsToCount);
        end
      calculateNumberOfTransfers: INTEGER
        -> index: INTEGER
        -> winner: INTEGER
        require
          index /= Void;
          winner /= Void;
          0 <= index;
          index < candidateList.count;
          0 <= winner;
          winner < candidateList.count;
          -- \nonnullelements(candidateList);
        ensure
          Result /= Void;
        end
    end --class BALLOT_COUNTING
    
    BALLOT_COUNTING client:{ COUNT_STATUS
    
    effective class COUNT_STATUS interfaced
    indexing
      about: "Inner class for state machine    ";    
    inherit
      ABSTRACT_COUNT_STATUS
    feature
      make
      getState: INTEGER
        ensure
          Result /= Void;
          Result = substate;
        end
      isPossibleState: BOOLEAN
        -> value: INTEGER
        require
          value /= Void;
        ensure
          Result /= Void;
        end
      substate: INTEGER
        ensure
          Result /= Void;
        end
      changeState
        -> newState: INTEGER
        require
          newState /= Void;
        ensure
          delta substate;
          newState = getState;
        end
    invariant
      substate = READY_TO_COUNT;
    end --class COUNT_STATUS
    
    
  end --cluster TALLY_CLUSTER

end --static diagram
