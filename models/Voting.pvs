Voting: THEORY
BEGIN
  BOUND: nat = 10

  Event: TYPE+ = {Winner, QuotaWinner, CompromiseWinner, TiedWinner, 
                  TiedLoser, Loser, TiedEarlyLoser, EarlyLoser, 
                  TiedSoreLoser, SoreLoser}
  Method: TYPE+ = {Plurality, STV}  
  Ballot: TYPE = [# identifier: below(BOUND),
                    assignees: finite_set[below(BOUND)],
                    preferences: finite_sequence[below(BOUND)] #]
  Candidate: TYPE = [# identifier: below(BOUND),
                       votes: finite_set[Ballot],
                       transfers: finite_set[Ballot],
                       surplus: finite_set[Ballot],
                       outcome: Event #]
  Scenario: TYPE = [# losers: finite_set[Candidate],
                      winners: finite_set[Candidate],
                      eliminated: finite_set[Candidate],
                      threshold: below(BOUND),
                      quota: below(BOUND) #]
  Election: TYPE = [# candidates: finite_set[Candidate],
                      seats: below(BOUND),
                      method: Method #]

  c,d: VAR Candidate
  b: VAR Ballot
  e: VAR Election
  s: VAR Scenario

  C0: AXIOM NOT member(b, intersection(c`votes, c`transfers))
  C1: AXIOM member(b, union(c`votes, c`transfers)) IMPLIES
            member(c`identifier, b`assignees)
  C2: AXIOM subset?(c`surplus, union(c`votes, c`transfers))
  C3: AXIOM card(c`surplus) < card(c`transfers) IMPLIES
            subset?(c`surplus, c`transfers)
  C4: AXIOM e`method = Plurality IMPLIES
            empty?(c`surplus) AND empty?(c`transfers)
  C5: AXIOM c /= d IFF c`identifier /= d`identifier

  T0: LEMMA FORALL(n: nat): even?(n)
  T1: LEMMA true
END Voting
