// This file was generated by jmlunit on Mon Nov 09 14:16:52 GMT 2009.

package election.tally;

/** Automatically-generated test driver for JML and JUnit based
 * testing of BallotCounting. The superclass of this class should be edited
 * to supply test data. However it's best not to edit this class
 * directly; instead use the command
 * <pre>
 *  jmlunit BallotCounting.java
 * </pre>
 * to regenerate this class whenever BallotCounting.java changes.
 */
public class BallotCounting_JML_Test
     extends BallotCounting_JML_TestData
{
    /** Initialize this class. */
    public BallotCounting_JML_Test(java.lang.String name) {
        super(name);
    }

    /** Run the tests. */
    public static void main(java.lang.String[] args) {
        org.jmlspecs.jmlunit.JMLTestRunner.run(suite());
        // You can also use a JUnit test runner such as:
        // junit.textui.TestRunner.run(suite());
    }

    /** Test to see if the code for class BallotCounting
     * has been compiled with runtime assertion checking (i.e., by jmlc).
     * Code that is not compiled with jmlc would not make an effective test,
     * since no assertion checking would be done. */
    public void test$IsRACCompiled() {
        junit.framework.Assert.assertTrue("code for class BallotCounting"
                + " was not compiled with jmlc"
                + " so no assertions will be checked!",
            org.jmlspecs.jmlrac.runtime.JMLChecker.isRACCompiled(BallotCounting.class)
            );
    }

    /** Return the test suite for this test class.  This will have
    * added to it at least test$IsRACCompiled(), and any test methods
    * written explicitly by the user in the superclass.  It will also
    * have added test suites for each testing each method and
    * constructor.
    */
    //@ ensures \result != null;
    public static junit.framework.Test suite() {
        BallotCounting_JML_Test testobj
            = new BallotCounting_JML_Test("BallotCounting_JML_Test");
        junit.framework.TestSuite testsuite = testobj.overallTestSuite();
        // Add instances of Test found by the reflection mechanism.
        testsuite.addTestSuite(BallotCounting_JML_Test.class);
        testobj.addTestSuiteForEachMethod(testsuite);
        return testsuite;
    }

    /** A JUnit test object that can run a single test method.  This
     * is defined as a nested class solely for convenience; it can't
     * be defined once and for all because it must subclass its
     * enclosing class.
     */
    protected static abstract class OneTest extends BallotCounting_JML_Test {

        /** Initialize this test object. */
        public OneTest(String name) {
            super(name);
        }

        /** The result object that holds information about testing. */
        protected junit.framework.TestResult result;

        //@ also
        //@ requires result != null;
        public void run(junit.framework.TestResult result) {
            this.result = result;
            super.run(result);
        }

        /* Run a single test and decide whether the test was
         * successful, meaningless, or a failure.  This is the
         * Template Method pattern abstraction of the inner loop in a
         * JML/JUnit test. */
        public void runTest() throws java.lang.Throwable {
            try {
                // The call being tested!
                doCall();
            }
            catch (org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError e) {
                // meaningless test input
                addMeaningless();
            } catch (org.jmlspecs.jmlrac.runtime.JMLAssertionError e) {
                // test failure
                int l = org.jmlspecs.jmlrac.runtime.JMLChecker.getLevel();
                org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel
                    (org.jmlspecs.jmlrac.runtime.JMLOption.NONE);
                try {
                    java.lang.String failmsg = this.failMessage(e);
                    junit.framework.AssertionFailedError err
                        = new junit.framework.AssertionFailedError(failmsg);
                    err.setStackTrace(new java.lang.StackTraceElement[]{});
                    err.initCause(e);
                    result.addFailure(this, err);
                } finally {
                    org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel(l);
                }
            } catch (java.lang.Throwable e) {
                // test success
            }
        }

        /** Call the method to be tested with the appropriate arguments. */
        protected abstract void doCall() throws java.lang.Throwable;

        /** Format the error message for a test failure, based on the
         * method's arguments. */
        protected abstract java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e);

        /** Inform listeners that a meaningless test was run. */
        private void addMeaningless() {
            if (result instanceof org.jmlspecs.jmlunit.JMLTestResult) {
                ((org.jmlspecs.jmlunit.JMLTestResult)result)
                    .addMeaningless(this);
            }
        }
    }

    /** Create the tests that are to be run for testing the class
     * BallotCounting.  The framework will then run them.
     * @param overallTestSuite$ The suite accumulating all of the tests
     * for this driver class.
     */
    //@ requires overallTestSuite$ != null;
    public void addTestSuiteForEachMethod
        (junit.framework.TestSuite overallTestSuite$)
    {
        try {
            this.addTestSuiteFor$TestDistributeSurplus(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestMoveSurplusBallots(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestRemoveNonTransferableBallots(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestCalculateNumberOfTransfers(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestTransferVotes(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestCount(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestElectCandidatesWithSurplus(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestExcludeLowestCandidates(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestFillLastSeats(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestStartCounting(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetDepositSavingThreshold(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestBallotCounting(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestUpdateCountStatus(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIncrementCountNumber(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetRemainingSeats(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetContinuingCandidates(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetCountStatus(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
    }

    /** Add tests for the distributeSurplus method
     * to the overall test suite. */
    private void addTestSuiteFor$TestDistributeSurplus
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("distributeSurplus");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_BallotCountingIter("distributeSurplus", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_BallotCountingIter(\"distributeSurplus\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("distributeSurplus", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"distributeSurplus\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final election.tally.BallotCounting receiver$
                        = (election.tally.BallotCounting) receivers$iter.get();
                    final int winner
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestDistributeSurplus(receiver$, winner));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the distributeSurplus method. */
    protected static class TestDistributeSurplus extends OneTest {
        /** The receiver */
        private election.tally.BallotCounting receiver$;
        /** Argument winner */
        private int winner;

        /** Initialize this instance. */
        public TestDistributeSurplus(election.tally.BallotCounting receiver$, int winner) {
            super("distributeSurplus"+ ":" + winner);
            this.receiver$ = receiver$;
            this.winner = winner;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.distributeSurplus(winner);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'distributeSurplus' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument winner: " + this.winner;
            return msg;
        }
    }

    /** Add tests for the moveSurplusBallots method
     * to the overall test suite. */
    private void addTestSuiteFor$TestMoveSurplusBallots
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("moveSurplusBallots");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_BallotCountingIter("moveSurplusBallots", 2));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_BallotCountingIter(\"moveSurplusBallots\", 2))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("moveSurplusBallots", 1);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"moveSurplusBallots\", 1)");
                while (!vint$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.IntIterator
                        vint$2$iter
                        = this.vintIter("moveSurplusBallots", 0);
                    this.check_has_data
                        (vint$2$iter,
                         "this.vintIter(\"moveSurplusBallots\", 0)");
                    while (!vint$2$iter.atEnd()) {
                        final election.tally.BallotCounting receiver$
                            = (election.tally.BallotCounting) receivers$iter.get();
                        final int winner
                            = vint$1$iter.getInt();
                        final int index
                            = vint$2$iter.getInt();
                        methodTests$.addTest
                            (new TestMoveSurplusBallots(receiver$, winner, index));
                        vint$2$iter.advance();
                    }
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the moveSurplusBallots method. */
    protected static class TestMoveSurplusBallots extends OneTest {
        /** The receiver */
        private election.tally.BallotCounting receiver$;
        /** Argument winner */
        private int winner;
        /** Argument index */
        private int index;

        /** Initialize this instance. */
        public TestMoveSurplusBallots(election.tally.BallotCounting receiver$, int winner, int index) {
            super("moveSurplusBallots"+ ":" + winner+ "," +index);
            this.receiver$ = receiver$;
            this.winner = winner;
            this.index = index;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.moveSurplusBallots(winner, index);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'moveSurplusBallots' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument winner: " + this.winner;
            msg += "\n\tArgument index: " + this.index;
            return msg;
        }
    }

    /** Add tests for the removeNonTransferableBallots method
     * to the overall test suite. */
    private void addTestSuiteFor$TestRemoveNonTransferableBallots
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("removeNonTransferableBallots");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_BallotCountingIter("removeNonTransferableBallots", 3));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_BallotCountingIter(\"removeNonTransferableBallots\", 3))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("removeNonTransferableBallots", 2);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"removeNonTransferableBallots\", 2)");
                while (!vint$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.IntIterator
                        vint$2$iter
                        = this.vintIter("removeNonTransferableBallots", 1);
                    this.check_has_data
                        (vint$2$iter,
                         "this.vintIter(\"removeNonTransferableBallots\", 1)");
                    while (!vint$2$iter.atEnd()) {
                        org.jmlspecs.jmlunit.strategies.IntIterator
                            vint$3$iter
                            = this.vintIter("removeNonTransferableBallots", 0);
                        this.check_has_data
                            (vint$3$iter,
                             "this.vintIter(\"removeNonTransferableBallots\", 0)");
                        while (!vint$3$iter.atEnd()) {
                            final election.tally.BallotCounting receiver$
                                = (election.tally.BallotCounting) receivers$iter.get();
                            final int winner
                                = vint$1$iter.getInt();
                            final int surplus
                                = vint$2$iter.getInt();
                            final int totalTransferableVotes
                                = vint$3$iter.getInt();
                            methodTests$.addTest
                                (new TestRemoveNonTransferableBallots(receiver$, winner, surplus, totalTransferableVotes));
                            vint$3$iter.advance();
                        }
                        vint$2$iter.advance();
                    }
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the removeNonTransferableBallots method. */
    protected static class TestRemoveNonTransferableBallots extends OneTest {
        /** The receiver */
        private election.tally.BallotCounting receiver$;
        /** Argument winner */
        private int winner;
        /** Argument surplus */
        private int surplus;
        /** Argument totalTransferableVotes */
        private int totalTransferableVotes;

        /** Initialize this instance. */
        public TestRemoveNonTransferableBallots(election.tally.BallotCounting receiver$, int winner, int surplus, int totalTransferableVotes) {
            super("removeNonTransferableBallots"+ ":" + winner+ "," +surplus+ "," +totalTransferableVotes);
            this.receiver$ = receiver$;
            this.winner = winner;
            this.surplus = surplus;
            this.totalTransferableVotes = totalTransferableVotes;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.removeNonTransferableBallots(winner, surplus, totalTransferableVotes);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'removeNonTransferableBallots' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument winner: " + this.winner;
            msg += "\n\tArgument surplus: " + this.surplus;
            msg += "\n\tArgument totalTransferableVotes: " + this.totalTransferableVotes;
            return msg;
        }
    }

    /** Add tests for the calculateNumberOfTransfers method
     * to the overall test suite. */
    private void addTestSuiteFor$TestCalculateNumberOfTransfers
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("calculateNumberOfTransfers");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_BallotCountingIter("calculateNumberOfTransfers", 2));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_BallotCountingIter(\"calculateNumberOfTransfers\", 2))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("calculateNumberOfTransfers", 1);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"calculateNumberOfTransfers\", 1)");
                while (!vint$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.IntIterator
                        vint$2$iter
                        = this.vintIter("calculateNumberOfTransfers", 0);
                    this.check_has_data
                        (vint$2$iter,
                         "this.vintIter(\"calculateNumberOfTransfers\", 0)");
                    while (!vint$2$iter.atEnd()) {
                        final election.tally.BallotCounting receiver$
                            = (election.tally.BallotCounting) receivers$iter.get();
                        final int winner
                            = vint$1$iter.getInt();
                        final int index
                            = vint$2$iter.getInt();
                        methodTests$.addTest
                            (new TestCalculateNumberOfTransfers(receiver$, winner, index));
                        vint$2$iter.advance();
                    }
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the calculateNumberOfTransfers method. */
    protected static class TestCalculateNumberOfTransfers extends OneTest {
        /** The receiver */
        private election.tally.BallotCounting receiver$;
        /** Argument winner */
        private int winner;
        /** Argument index */
        private int index;

        /** Initialize this instance. */
        public TestCalculateNumberOfTransfers(election.tally.BallotCounting receiver$, int winner, int index) {
            super("calculateNumberOfTransfers"+ ":" + winner+ "," +index);
            this.receiver$ = receiver$;
            this.winner = winner;
            this.index = index;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.calculateNumberOfTransfers(winner, index);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'calculateNumberOfTransfers' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument winner: " + this.winner;
            msg += "\n\tArgument index: " + this.index;
            return msg;
        }
    }

    /** Add tests for the transferVotes method
     * to the overall test suite. */
    private void addTestSuiteFor$TestTransferVotes
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("transferVotes");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_BallotCountingIter("transferVotes", 3));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_BallotCountingIter(\"transferVotes\", 3))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    velection_tally_Candidate$1$iter
                    = this.velection_tally_CandidateIter("transferVotes", 2);
                this.check_has_data
                    (velection_tally_Candidate$1$iter,
                     "this.velection_tally_CandidateIter(\"transferVotes\", 2)");
                while (!velection_tally_Candidate$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                        velection_tally_Candidate$2$iter
                        = this.velection_tally_CandidateIter("transferVotes", 1);
                    this.check_has_data
                        (velection_tally_Candidate$2$iter,
                         "this.velection_tally_CandidateIter(\"transferVotes\", 1)");
                    while (!velection_tally_Candidate$2$iter.atEnd()) {
                        org.jmlspecs.jmlunit.strategies.IntIterator
                            vint$3$iter
                            = this.vintIter("transferVotes", 0);
                        this.check_has_data
                            (vint$3$iter,
                             "this.vintIter(\"transferVotes\", 0)");
                        while (!vint$3$iter.atEnd()) {
                            final election.tally.BallotCounting receiver$
                                = (election.tally.BallotCounting) receivers$iter.get();
                            final election.tally.Candidate fromCandidate
                                = (election.tally.Candidate) velection_tally_Candidate$1$iter.get();
                            final election.tally.Candidate toCandidate
                                = (election.tally.Candidate) velection_tally_Candidate$2$iter.get();
                            final int numberOfVotes
                                = vint$3$iter.getInt();
                            methodTests$.addTest
                                (new TestTransferVotes(receiver$, fromCandidate, toCandidate, numberOfVotes));
                            vint$3$iter.advance();
                        }
                        velection_tally_Candidate$2$iter.advance();
                    }
                    velection_tally_Candidate$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the transferVotes method. */
    protected static class TestTransferVotes extends OneTest {
        /** The receiver */
        private election.tally.BallotCounting receiver$;
        /** Argument fromCandidate */
        private election.tally.Candidate fromCandidate;
        /** Argument toCandidate */
        private election.tally.Candidate toCandidate;
        /** Argument numberOfVotes */
        private int numberOfVotes;

        /** Initialize this instance. */
        public TestTransferVotes(election.tally.BallotCounting receiver$, election.tally.Candidate fromCandidate, election.tally.Candidate toCandidate, int numberOfVotes) {
            super("transferVotes"+ ":" + (fromCandidate==null? "null" :"{election.tally.Candidate}")+ "," +(toCandidate==null? "null" :"{election.tally.Candidate}")+ "," +numberOfVotes);
            this.receiver$ = receiver$;
            this.fromCandidate = fromCandidate;
            this.toCandidate = toCandidate;
            this.numberOfVotes = numberOfVotes;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.transferVotes(fromCandidate, toCandidate, numberOfVotes);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'transferVotes' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument fromCandidate: " + this.fromCandidate;
            msg += "\n\tArgument toCandidate: " + this.toCandidate;
            msg += "\n\tArgument numberOfVotes: " + this.numberOfVotes;
            return msg;
        }
    }

    /** Add tests for the count method
     * to the overall test suite. */
    private void addTestSuiteFor$TestCount
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("count");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_BallotCountingIter("count", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_BallotCountingIter(\"count\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.BallotCounting receiver$
                    = (election.tally.BallotCounting) receivers$iter.get();
                methodTests$.addTest
                    (new TestCount(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the count method. */
    protected static class TestCount extends OneTest {
        /** The receiver */
        private election.tally.BallotCounting receiver$;

        /** Initialize this instance. */
        public TestCount(election.tally.BallotCounting receiver$) {
            super("count");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.count();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'count' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the electCandidatesWithSurplus method
     * to the overall test suite. */
    private void addTestSuiteFor$TestElectCandidatesWithSurplus
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("electCandidatesWithSurplus");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_BallotCountingIter("electCandidatesWithSurplus", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_BallotCountingIter(\"electCandidatesWithSurplus\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.BallotCounting receiver$
                    = (election.tally.BallotCounting) receivers$iter.get();
                methodTests$.addTest
                    (new TestElectCandidatesWithSurplus(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the electCandidatesWithSurplus method. */
    protected static class TestElectCandidatesWithSurplus extends OneTest {
        /** The receiver */
        private election.tally.BallotCounting receiver$;

        /** Initialize this instance. */
        public TestElectCandidatesWithSurplus(election.tally.BallotCounting receiver$) {
            super("electCandidatesWithSurplus");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.electCandidatesWithSurplus();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'electCandidatesWithSurplus' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the excludeLowestCandidates method
     * to the overall test suite. */
    private void addTestSuiteFor$TestExcludeLowestCandidates
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("excludeLowestCandidates");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_BallotCountingIter("excludeLowestCandidates", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_BallotCountingIter(\"excludeLowestCandidates\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.BallotCounting receiver$
                    = (election.tally.BallotCounting) receivers$iter.get();
                methodTests$.addTest
                    (new TestExcludeLowestCandidates(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the excludeLowestCandidates method. */
    protected static class TestExcludeLowestCandidates extends OneTest {
        /** The receiver */
        private election.tally.BallotCounting receiver$;

        /** Initialize this instance. */
        public TestExcludeLowestCandidates(election.tally.BallotCounting receiver$) {
            super("excludeLowestCandidates");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.excludeLowestCandidates();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'excludeLowestCandidates' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the fillLastSeats method
     * to the overall test suite. */
    private void addTestSuiteFor$TestFillLastSeats
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("fillLastSeats");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_BallotCountingIter("fillLastSeats", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_BallotCountingIter(\"fillLastSeats\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.BallotCounting receiver$
                    = (election.tally.BallotCounting) receivers$iter.get();
                methodTests$.addTest
                    (new TestFillLastSeats(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the fillLastSeats method. */
    protected static class TestFillLastSeats extends OneTest {
        /** The receiver */
        private election.tally.BallotCounting receiver$;

        /** Initialize this instance. */
        public TestFillLastSeats(election.tally.BallotCounting receiver$) {
            super("fillLastSeats");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.fillLastSeats();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'fillLastSeats' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the startCounting method
     * to the overall test suite. */
    private void addTestSuiteFor$TestStartCounting
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("startCounting");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_BallotCountingIter("startCounting", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_BallotCountingIter(\"startCounting\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.BallotCounting receiver$
                    = (election.tally.BallotCounting) receivers$iter.get();
                methodTests$.addTest
                    (new TestStartCounting(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the startCounting method. */
    protected static class TestStartCounting extends OneTest {
        /** The receiver */
        private election.tally.BallotCounting receiver$;

        /** Initialize this instance. */
        public TestStartCounting(election.tally.BallotCounting receiver$) {
            super("startCounting");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.startCounting();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'startCounting' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getDepositSavingThreshold method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetDepositSavingThreshold
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getDepositSavingThreshold");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_BallotCountingIter("getDepositSavingThreshold", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_BallotCountingIter(\"getDepositSavingThreshold\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.BallotCounting receiver$
                    = (election.tally.BallotCounting) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetDepositSavingThreshold(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getDepositSavingThreshold method. */
    protected static class TestGetDepositSavingThreshold extends OneTest {
        /** The receiver */
        private election.tally.BallotCounting receiver$;

        /** Initialize this instance. */
        public TestGetDepositSavingThreshold(election.tally.BallotCounting receiver$) {
            super("getDepositSavingThreshold");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getDepositSavingThreshold();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getDepositSavingThreshold' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the BallotCounting contructor
     * to the overall test suite. */
    private void addTestSuiteFor$TestBallotCounting
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("BallotCounting");
        try {
            methodTests$.addTest
                (new TestBallotCounting());
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the BallotCounting contructor. */
    protected static class TestBallotCounting extends OneTest {

        /** Initialize this instance. */
        public TestBallotCounting() {
            super("BallotCounting");
        }

        protected void doCall() throws java.lang.Throwable {
            new BallotCounting();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tContructor 'BallotCounting'";
            return msg;
        }
    }

    /** Add tests for the updateCountStatus method
     * to the overall test suite. */
    private void addTestSuiteFor$TestUpdateCountStatus
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("updateCountStatus");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_BallotCountingIter("updateCountStatus", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_BallotCountingIter(\"updateCountStatus\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("updateCountStatus", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"updateCountStatus\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final election.tally.BallotCounting receiver$
                        = (election.tally.BallotCounting) receivers$iter.get();
                    final int countingStatus
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestUpdateCountStatus(receiver$, countingStatus));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the updateCountStatus method. */
    protected static class TestUpdateCountStatus extends OneTest {
        /** The receiver */
        private election.tally.BallotCounting receiver$;
        /** Argument countingStatus */
        private int countingStatus;

        /** Initialize this instance. */
        public TestUpdateCountStatus(election.tally.BallotCounting receiver$, int countingStatus) {
            super("updateCountStatus"+ ":" + countingStatus);
            this.receiver$ = receiver$;
            this.countingStatus = countingStatus;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.updateCountStatus(countingStatus);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'updateCountStatus' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument countingStatus: " + this.countingStatus;
            return msg;
        }
    }

    /** Add tests for the incrementCountNumber method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIncrementCountNumber
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("incrementCountNumber");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_BallotCountingIter("incrementCountNumber", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_BallotCountingIter(\"incrementCountNumber\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.BallotCounting receiver$
                    = (election.tally.BallotCounting) receivers$iter.get();
                methodTests$.addTest
                    (new TestIncrementCountNumber(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the incrementCountNumber method. */
    protected static class TestIncrementCountNumber extends OneTest {
        /** The receiver */
        private election.tally.BallotCounting receiver$;

        /** Initialize this instance. */
        public TestIncrementCountNumber(election.tally.BallotCounting receiver$) {
            super("incrementCountNumber");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.incrementCountNumber();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'incrementCountNumber' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getRemainingSeats method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetRemainingSeats
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getRemainingSeats");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_BallotCountingIter("getRemainingSeats", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_BallotCountingIter(\"getRemainingSeats\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.BallotCounting receiver$
                    = (election.tally.BallotCounting) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetRemainingSeats(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getRemainingSeats method. */
    protected static class TestGetRemainingSeats extends OneTest {
        /** The receiver */
        private election.tally.BallotCounting receiver$;

        /** Initialize this instance. */
        public TestGetRemainingSeats(election.tally.BallotCounting receiver$) {
            super("getRemainingSeats");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getRemainingSeats();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getRemainingSeats' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getContinuingCandidates method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetContinuingCandidates
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getContinuingCandidates");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_BallotCountingIter("getContinuingCandidates", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_BallotCountingIter(\"getContinuingCandidates\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.BallotCounting receiver$
                    = (election.tally.BallotCounting) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetContinuingCandidates(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getContinuingCandidates method. */
    protected static class TestGetContinuingCandidates extends OneTest {
        /** The receiver */
        private election.tally.BallotCounting receiver$;

        /** Initialize this instance. */
        public TestGetContinuingCandidates(election.tally.BallotCounting receiver$) {
            super("getContinuingCandidates");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getContinuingCandidates();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getContinuingCandidates' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getCountStatus method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetCountStatus
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getCountStatus");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_BallotCountingIter("getCountStatus", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_BallotCountingIter(\"getCountStatus\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.BallotCounting receiver$
                    = (election.tally.BallotCounting) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetCountStatus(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getCountStatus method. */
    protected static class TestGetCountStatus extends OneTest {
        /** The receiver */
        private election.tally.BallotCounting receiver$;

        /** Initialize this instance. */
        public TestGetCountStatus(election.tally.BallotCounting receiver$) {
            super("getCountStatus");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getCountStatus();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getCountStatus' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Check that the iterator is non-null and not empty. */
    private void
    check_has_data(org.jmlspecs.jmlunit.strategies.IndefiniteIterator iter,
                   String call)
    {
        if (iter == null) {
            junit.framework.Assert.fail(call + " returned null");
        }
        if (iter.atEnd()) {
            junit.framework.Assert.fail(call + " returned an empty iterator");
        }
    }

    /** Converts a char to a printable String for display */
    public static String charToString(char c) {
        if (c == '\n') {
            return "NL";
        } else if (c == '\r') {
            return "CR";
        } else if (c == '\t') {
            return "TAB";
        } else if (Character.isISOControl(c)) {
            int i = (int)c;
            return "\\u"
                    + Character.forDigit((i/2048)%16,16)
                    + Character.forDigit((i/256)%16,16)
                    + Character.forDigit((i/16)%16,16)
                    + Character.forDigit((i)%16,16);
        }
        return Character.toString(c);
    }
}
