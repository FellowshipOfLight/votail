// This file was generated by jmlunit on Mon Nov 09 14:16:52 GMT 2009.

package election.tally;

/** Automatically-generated test driver for JML and JUnit based
 * testing of Constituency. The superclass of this class should be edited
 * to supply test data. However it's best not to edit this class
 * directly; instead use the command
 * <pre>
 *  jmlunit Constituency.java
 * </pre>
 * to regenerate this class whenever Constituency.java changes.
 */
public class Constituency_JML_Test
     extends Constituency_JML_TestData
{
    /** Initialize this class. */
    public Constituency_JML_Test(java.lang.String name) {
        super(name);
    }

    /** Run the tests. */
    public static void main(java.lang.String[] args) {
        org.jmlspecs.jmlunit.JMLTestRunner.run(suite());
        // You can also use a JUnit test runner such as:
        // junit.textui.TestRunner.run(suite());
    }

    /** Test to see if the code for class Constituency
     * has been compiled with runtime assertion checking (i.e., by jmlc).
     * Code that is not compiled with jmlc would not make an effective test,
     * since no assertion checking would be done. */
    public void test$IsRACCompiled() {
        junit.framework.Assert.assertTrue("code for class Constituency"
                + " was not compiled with jmlc"
                + " so no assertions will be checked!",
            org.jmlspecs.jmlrac.runtime.JMLChecker.isRACCompiled(Constituency.class)
            );
    }

    /** Return the test suite for this test class.  This will have
    * added to it at least test$IsRACCompiled(), and any test methods
    * written explicitly by the user in the superclass.  It will also
    * have added test suites for each testing each method and
    * constructor.
    */
    //@ ensures \result != null;
    public static junit.framework.Test suite() {
        Constituency_JML_Test testobj
            = new Constituency_JML_Test("Constituency_JML_Test");
        junit.framework.TestSuite testsuite = testobj.overallTestSuite();
        // Add instances of Test found by the reflection mechanism.
        testsuite.addTestSuite(Constituency_JML_Test.class);
        testobj.addTestSuiteForEachMethod(testsuite);
        return testsuite;
    }

    /** A JUnit test object that can run a single test method.  This
     * is defined as a nested class solely for convenience; it can't
     * be defined once and for all because it must subclass its
     * enclosing class.
     */
    protected static abstract class OneTest extends Constituency_JML_Test {

        /** Initialize this test object. */
        public OneTest(String name) {
            super(name);
        }

        /** The result object that holds information about testing. */
        protected junit.framework.TestResult result;

        //@ also
        //@ requires result != null;
        public void run(junit.framework.TestResult result) {
            this.result = result;
            super.run(result);
        }

        /* Run a single test and decide whether the test was
         * successful, meaningless, or a failure.  This is the
         * Template Method pattern abstraction of the inner loop in a
         * JML/JUnit test. */
        public void runTest() throws java.lang.Throwable {
            try {
                // The call being tested!
                doCall();
            }
            catch (org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError e) {
                // meaningless test input
                addMeaningless();
            } catch (org.jmlspecs.jmlrac.runtime.JMLAssertionError e) {
                // test failure
                int l = org.jmlspecs.jmlrac.runtime.JMLChecker.getLevel();
                org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel
                    (org.jmlspecs.jmlrac.runtime.JMLOption.NONE);
                try {
                    java.lang.String failmsg = this.failMessage(e);
                    junit.framework.AssertionFailedError err
                        = new junit.framework.AssertionFailedError(failmsg);
                    err.setStackTrace(new java.lang.StackTraceElement[]{});
                    err.initCause(e);
                    result.addFailure(this, err);
                } finally {
                    org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel(l);
                }
            } catch (java.lang.Throwable e) {
                // test success
            }
        }

        /** Call the method to be tested with the appropriate arguments. */
        protected abstract void doCall() throws java.lang.Throwable;

        /** Format the error message for a test failure, based on the
         * method's arguments. */
        protected abstract java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e);

        /** Inform listeners that a meaningless test was run. */
        private void addMeaningless() {
            if (result instanceof org.jmlspecs.jmlunit.JMLTestResult) {
                ((org.jmlspecs.jmlunit.JMLTestResult)result)
                    .addMeaningless(this);
            }
        }
    }

    /** Create the tests that are to be run for testing the class
     * Constituency.  The framework will then run them.
     * @param overallTestSuite$ The suite accumulating all of the tests
     * for this driver class.
     */
    //@ requires overallTestSuite$ != null;
    public void addTestSuiteForEachMethod
        (junit.framework.TestSuite overallTestSuite$)
    {
        try {
            this.addTestSuiteFor$TestGetCandidate(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestSetNumberOfCandidates(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetNumberOfSeatsInThisElection(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetTotalNumberOfSeats(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestSetNumberOfSeats(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetNumberOfCandidates(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
    }

    /** Add tests for the getCandidate method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetCandidate
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getCandidate");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_ConstituencyIter("getCandidate", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_ConstituencyIter(\"getCandidate\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("getCandidate", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"getCandidate\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final election.tally.Constituency receiver$
                        = (election.tally.Constituency) receivers$iter.get();
                    final int index
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestGetCandidate(receiver$, index));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getCandidate method. */
    protected static class TestGetCandidate extends OneTest {
        /** The receiver */
        private election.tally.Constituency receiver$;
        /** Argument index */
        private int index;

        /** Initialize this instance. */
        public TestGetCandidate(election.tally.Constituency receiver$, int index) {
            super("getCandidate"+ ":" + index);
            this.receiver$ = receiver$;
            this.index = index;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getCandidate(index);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getCandidate' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument index: " + this.index;
            return msg;
        }
    }

    /** Add tests for the setNumberOfCandidates method
     * to the overall test suite. */
    private void addTestSuiteFor$TestSetNumberOfCandidates
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("setNumberOfCandidates");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_ConstituencyIter("setNumberOfCandidates", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_ConstituencyIter(\"setNumberOfCandidates\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("setNumberOfCandidates", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"setNumberOfCandidates\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final election.tally.Constituency receiver$
                        = (election.tally.Constituency) receivers$iter.get();
                    final int number
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestSetNumberOfCandidates(receiver$, number));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the setNumberOfCandidates method. */
    protected static class TestSetNumberOfCandidates extends OneTest {
        /** The receiver */
        private election.tally.Constituency receiver$;
        /** Argument number */
        private int number;

        /** Initialize this instance. */
        public TestSetNumberOfCandidates(election.tally.Constituency receiver$, int number) {
            super("setNumberOfCandidates"+ ":" + number);
            this.receiver$ = receiver$;
            this.number = number;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.setNumberOfCandidates(number);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'setNumberOfCandidates' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument number: " + this.number;
            return msg;
        }
    }

    /** Add tests for the getNumberOfSeatsInThisElection method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetNumberOfSeatsInThisElection
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getNumberOfSeatsInThisElection");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_ConstituencyIter("getNumberOfSeatsInThisElection", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_ConstituencyIter(\"getNumberOfSeatsInThisElection\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.Constituency receiver$
                    = (election.tally.Constituency) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetNumberOfSeatsInThisElection(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getNumberOfSeatsInThisElection method. */
    protected static class TestGetNumberOfSeatsInThisElection extends OneTest {
        /** The receiver */
        private election.tally.Constituency receiver$;

        /** Initialize this instance. */
        public TestGetNumberOfSeatsInThisElection(election.tally.Constituency receiver$) {
            super("getNumberOfSeatsInThisElection");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getNumberOfSeatsInThisElection();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getNumberOfSeatsInThisElection' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getTotalNumberOfSeats method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetTotalNumberOfSeats
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getTotalNumberOfSeats");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_ConstituencyIter("getTotalNumberOfSeats", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_ConstituencyIter(\"getTotalNumberOfSeats\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.Constituency receiver$
                    = (election.tally.Constituency) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetTotalNumberOfSeats(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getTotalNumberOfSeats method. */
    protected static class TestGetTotalNumberOfSeats extends OneTest {
        /** The receiver */
        private election.tally.Constituency receiver$;

        /** Initialize this instance. */
        public TestGetTotalNumberOfSeats(election.tally.Constituency receiver$) {
            super("getTotalNumberOfSeats");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getTotalNumberOfSeats();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getTotalNumberOfSeats' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the setNumberOfSeats method
     * to the overall test suite. */
    private void addTestSuiteFor$TestSetNumberOfSeats
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("setNumberOfSeats");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_ConstituencyIter("setNumberOfSeats", 2));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_ConstituencyIter(\"setNumberOfSeats\", 2))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("setNumberOfSeats", 1);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"setNumberOfSeats\", 1)");
                while (!vint$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.IntIterator
                        vint$2$iter
                        = this.vintIter("setNumberOfSeats", 0);
                    this.check_has_data
                        (vint$2$iter,
                         "this.vintIter(\"setNumberOfSeats\", 0)");
                    while (!vint$2$iter.atEnd()) {
                        final election.tally.Constituency receiver$
                            = (election.tally.Constituency) receivers$iter.get();
                        final int numberOfSeatsInThisElection
                            = vint$1$iter.getInt();
                        final int totalNumberOfSeats
                            = vint$2$iter.getInt();
                        methodTests$.addTest
                            (new TestSetNumberOfSeats(receiver$, numberOfSeatsInThisElection, totalNumberOfSeats));
                        vint$2$iter.advance();
                    }
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the setNumberOfSeats method. */
    protected static class TestSetNumberOfSeats extends OneTest {
        /** The receiver */
        private election.tally.Constituency receiver$;
        /** Argument numberOfSeatsInThisElection */
        private int numberOfSeatsInThisElection;
        /** Argument totalNumberOfSeats */
        private int totalNumberOfSeats;

        /** Initialize this instance. */
        public TestSetNumberOfSeats(election.tally.Constituency receiver$, int numberOfSeatsInThisElection, int totalNumberOfSeats) {
            super("setNumberOfSeats"+ ":" + numberOfSeatsInThisElection+ "," +totalNumberOfSeats);
            this.receiver$ = receiver$;
            this.numberOfSeatsInThisElection = numberOfSeatsInThisElection;
            this.totalNumberOfSeats = totalNumberOfSeats;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.setNumberOfSeats(numberOfSeatsInThisElection, totalNumberOfSeats);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'setNumberOfSeats' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument numberOfSeatsInThisElection: " + this.numberOfSeatsInThisElection;
            msg += "\n\tArgument totalNumberOfSeats: " + this.totalNumberOfSeats;
            return msg;
        }
    }

    /** Add tests for the getNumberOfCandidates method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetNumberOfCandidates
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getNumberOfCandidates");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_ConstituencyIter("getNumberOfCandidates", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_ConstituencyIter(\"getNumberOfCandidates\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.Constituency receiver$
                    = (election.tally.Constituency) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetNumberOfCandidates(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getNumberOfCandidates method. */
    protected static class TestGetNumberOfCandidates extends OneTest {
        /** The receiver */
        private election.tally.Constituency receiver$;

        /** Initialize this instance. */
        public TestGetNumberOfCandidates(election.tally.Constituency receiver$) {
            super("getNumberOfCandidates");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getNumberOfCandidates();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getNumberOfCandidates' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Check that the iterator is non-null and not empty. */
    private void
    check_has_data(org.jmlspecs.jmlunit.strategies.IndefiniteIterator iter,
                   String call)
    {
        if (iter == null) {
            junit.framework.Assert.fail(call + " returned null");
        }
        if (iter.atEnd()) {
            junit.framework.Assert.fail(call + " returned an empty iterator");
        }
    }

    /** Converts a char to a printable String for display */
    public static String charToString(char c) {
        if (c == '\n') {
            return "NL";
        } else if (c == '\r') {
            return "CR";
        } else if (c == '\t') {
            return "TAB";
        } else if (Character.isISOControl(c)) {
            int i = (int)c;
            return "\\u"
                    + Character.forDigit((i/2048)%16,16)
                    + Character.forDigit((i/256)%16,16)
                    + Character.forDigit((i/16)%16,16)
                    + Character.forDigit((i)%16,16);
        }
        return Character.toString(c);
    }
}
