// This file was generated by jmlunit on Fri Dec 11 21:58:12 GMT 2009.

package election.tally;

/** Automatically-generated test driver for JML and JUnit based
 * testing of AbstractBallotCounting. The superclass of this class should be edited
 * to supply test data. However it's best not to edit this class
 * directly; instead use the command
 * <pre>
 *  jmlunit AbstractBallotCounting.java
 * </pre>
 * to regenerate this class whenever AbstractBallotCounting.java changes.
 */
public class AbstractBallotCounting_JML_Test
     extends AbstractBallotCounting_JML_TestData
{
    /** Initialize this class. */
    public AbstractBallotCounting_JML_Test(java.lang.String name) {
        super(name);
    }

    /** Run the tests. */
    public static void main(java.lang.String[] args) {
        org.jmlspecs.jmlunit.JMLTestRunner.run(suite());
        // You can also use a JUnit test runner such as:
        // junit.textui.TestRunner.run(suite());
    }

    /** Test to see if the code for class AbstractBallotCounting
     * has been compiled with runtime assertion checking (i.e., by jmlc).
     * Code that is not compiled with jmlc would not make an effective test,
     * since no assertion checking would be done. */
    public void test$IsRACCompiled() {
        junit.framework.Assert.assertTrue("code for class AbstractBallotCounting"
                + " was not compiled with jmlc"
                + " so no assertions will be checked!",
            org.jmlspecs.jmlrac.runtime.JMLChecker.isRACCompiled(AbstractBallotCounting.class)
            );
    }

    /** Return the test suite for this test class.  This will have
    * added to it at least test$IsRACCompiled(), and any test methods
    * written explicitly by the user in the superclass.  It will also
    * have added test suites for each testing each method and
    * constructor.
    */
    //@ ensures \result != null;
    public static junit.framework.Test suite() {
        AbstractBallotCounting_JML_Test testobj
            = new AbstractBallotCounting_JML_Test("AbstractBallotCounting_JML_Test");
        junit.framework.TestSuite testsuite = testobj.overallTestSuite();
        // Add instances of Test found by the reflection mechanism.
        testsuite.addTestSuite(AbstractBallotCounting_JML_Test.class);
        testobj.addTestSuiteForEachMethod(testsuite);
        return testsuite;
    }

    /** A JUnit test object that can run a single test method.  This
     * is defined as a nested class solely for convenience; it can't
     * be defined once and for all because it must subclass its
     * enclosing class.
     */
    protected static abstract class OneTest extends AbstractBallotCounting_JML_Test {

        /** Initialize this test object. */
        public OneTest(String name) {
            super(name);
        }

        /** The result object that holds information about testing. */
        protected junit.framework.TestResult result;

        //@ also
        //@ requires result != null;
        public void run(junit.framework.TestResult result) {
            this.result = result;
            super.run(result);
        }

        /* Run a single test and decide whether the test was
         * successful, meaningless, or a failure.  This is the
         * Template Method pattern abstraction of the inner loop in a
         * JML/JUnit test. */
        public void runTest() throws java.lang.Throwable {
            try {
                // The call being tested!
                doCall();
            }
            catch (org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError e) {
                // meaningless test input
                addMeaningless();
            } catch (org.jmlspecs.jmlrac.runtime.JMLAssertionError e) {
                // test failure
                int l = org.jmlspecs.jmlrac.runtime.JMLChecker.getLevel();
                org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel
                    (org.jmlspecs.jmlrac.runtime.JMLOption.NONE);
                try {
                    java.lang.String failmsg = this.failMessage(e);
                    junit.framework.AssertionFailedError err
                        = new junit.framework.AssertionFailedError(failmsg);
                    err.setStackTrace(new java.lang.StackTraceElement[]{});
                    err.initCause(e);
                    result.addFailure(this, err);
                } finally {
                    org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel(l);
                }
            } catch (java.lang.Throwable e) {
                // test success
            }
        }

        /** Call the method to be tested with the appropriate arguments. */
        protected abstract void doCall() throws java.lang.Throwable;

        /** Format the error message for a test failure, based on the
         * method's arguments. */
        protected abstract java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e);

        /** Inform listeners that a meaningless test was run. */
        private void addMeaningless() {
            if (result instanceof org.jmlspecs.jmlunit.JMLTestResult) {
                ((org.jmlspecs.jmlunit.JMLTestResult)result)
                    .addMeaningless(this);
            }
        }
    }

    /** Create the tests that are to be run for testing the class
     * AbstractBallotCounting.  The framework will then run them.
     * @param overallTestSuite$ The suite accumulating all of the tests
     * for this driver class.
     */
    //@ requires overallTestSuite$ != null;
    public void addTestSuiteForEachMethod
        (junit.framework.TestSuite overallTestSuite$)
    {
        try {
            this.addTestSuiteFor$TestHasQuota(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsElected(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetSurplus(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetTotalSumOfSurpluses(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsDepositSaved(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestDistributeSurplus(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestSetup(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestLoad(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetQuota(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestCalculateFirstPreferences(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestCountBallotsFor(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestCountFirstPreferences(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetPotentialTransfers(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetStatus(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetNextContinuingPreference(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsContinuingCandidateID(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetActualTransfers(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetRoundedFractionalValue(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetTransferShortfall(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestRandomSelection(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetTransferRemainder(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsHigherThan(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetOrder(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestCompareCandidates(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetTotalTransferableVotes(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestTransferVotes(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestFindHighestCandidate(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestFindLowestCandidate(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestEliminateCandidate(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestMakeDecision(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestRedistributeBallots(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestTransferBallot(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestCount(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestElectCandidate(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestGetNumberContinuing(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
    }

    /** Add tests for the hasQuota method
     * to the overall test suite. */
    private void addTestSuiteFor$TestHasQuota
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("hasQuota");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("hasQuota", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"hasQuota\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    velection_tally_Candidate$1$iter
                    = this.velection_tally_CandidateIter("hasQuota", 0);
                this.check_has_data
                    (velection_tally_Candidate$1$iter,
                     "this.velection_tally_CandidateIter(\"hasQuota\", 0)");
                while (!velection_tally_Candidate$1$iter.atEnd()) {
                    final election.tally.AbstractBallotCounting receiver$
                        = (election.tally.AbstractBallotCounting) receivers$iter.get();
                    final election.tally.Candidate candidate
                        = (election.tally.Candidate) velection_tally_Candidate$1$iter.get();
                    methodTests$.addTest
                        (new TestHasQuota(receiver$, candidate));
                    velection_tally_Candidate$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the hasQuota method. */
    protected static class TestHasQuota extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument candidate */
        private election.tally.Candidate candidate;

        /** Initialize this instance. */
        public TestHasQuota(election.tally.AbstractBallotCounting receiver$, election.tally.Candidate candidate) {
            super("hasQuota"+ ":" + (candidate==null? "null" :"{election.tally.Candidate}"));
            this.receiver$ = receiver$;
            this.candidate = candidate;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.hasQuota(candidate);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'hasQuota' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument candidate: " + this.candidate;
            return msg;
        }
    }

    /** Add tests for the isElected method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsElected
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isElected");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("isElected", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"isElected\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    velection_tally_Candidate$1$iter
                    = this.velection_tally_CandidateIter("isElected", 0);
                this.check_has_data
                    (velection_tally_Candidate$1$iter,
                     "this.velection_tally_CandidateIter(\"isElected\", 0)");
                while (!velection_tally_Candidate$1$iter.atEnd()) {
                    final election.tally.AbstractBallotCounting receiver$
                        = (election.tally.AbstractBallotCounting) receivers$iter.get();
                    final election.tally.Candidate candidate
                        = (election.tally.Candidate) velection_tally_Candidate$1$iter.get();
                    methodTests$.addTest
                        (new TestIsElected(receiver$, candidate));
                    velection_tally_Candidate$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isElected method. */
    protected static class TestIsElected extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument candidate */
        private election.tally.Candidate candidate;

        /** Initialize this instance. */
        public TestIsElected(election.tally.AbstractBallotCounting receiver$, election.tally.Candidate candidate) {
            super("isElected"+ ":" + (candidate==null? "null" :"{election.tally.Candidate}"));
            this.receiver$ = receiver$;
            this.candidate = candidate;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isElected(candidate);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isElected' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument candidate: " + this.candidate;
            return msg;
        }
    }

    /** Add tests for the getSurplus method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetSurplus
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getSurplus");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("getSurplus", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"getSurplus\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    velection_tally_Candidate$1$iter
                    = this.velection_tally_CandidateIter("getSurplus", 0);
                this.check_has_data
                    (velection_tally_Candidate$1$iter,
                     "this.velection_tally_CandidateIter(\"getSurplus\", 0)");
                while (!velection_tally_Candidate$1$iter.atEnd()) {
                    final election.tally.AbstractBallotCounting receiver$
                        = (election.tally.AbstractBallotCounting) receivers$iter.get();
                    final election.tally.Candidate candidate
                        = (election.tally.Candidate) velection_tally_Candidate$1$iter.get();
                    methodTests$.addTest
                        (new TestGetSurplus(receiver$, candidate));
                    velection_tally_Candidate$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getSurplus method. */
    protected static class TestGetSurplus extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument candidate */
        private election.tally.Candidate candidate;

        /** Initialize this instance. */
        public TestGetSurplus(election.tally.AbstractBallotCounting receiver$, election.tally.Candidate candidate) {
            super("getSurplus"+ ":" + (candidate==null? "null" :"{election.tally.Candidate}"));
            this.receiver$ = receiver$;
            this.candidate = candidate;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getSurplus(candidate);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getSurplus' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument candidate: " + this.candidate;
            return msg;
        }
    }

    /** Add tests for the getTotalSumOfSurpluses method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetTotalSumOfSurpluses
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getTotalSumOfSurpluses");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("getTotalSumOfSurpluses", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"getTotalSumOfSurpluses\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.AbstractBallotCounting receiver$
                    = (election.tally.AbstractBallotCounting) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetTotalSumOfSurpluses(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getTotalSumOfSurpluses method. */
    protected static class TestGetTotalSumOfSurpluses extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;

        /** Initialize this instance. */
        public TestGetTotalSumOfSurpluses(election.tally.AbstractBallotCounting receiver$) {
            super("getTotalSumOfSurpluses");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getTotalSumOfSurpluses();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getTotalSumOfSurpluses' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the isDepositSaved method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsDepositSaved
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isDepositSaved");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("isDepositSaved", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"isDepositSaved\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("isDepositSaved", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"isDepositSaved\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final election.tally.AbstractBallotCounting receiver$
                        = (election.tally.AbstractBallotCounting) receivers$iter.get();
                    final int index
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestIsDepositSaved(receiver$, index));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isDepositSaved method. */
    protected static class TestIsDepositSaved extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument index */
        private int index;

        /** Initialize this instance. */
        public TestIsDepositSaved(election.tally.AbstractBallotCounting receiver$, int index) {
            super("isDepositSaved"+ ":" + index);
            this.receiver$ = receiver$;
            this.index = index;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isDepositSaved(index);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isDepositSaved' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument index: " + this.index;
            return msg;
        }
    }

    /** Add tests for the distributeSurplus method
     * to the overall test suite. */
    private void addTestSuiteFor$TestDistributeSurplus
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("distributeSurplus");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("distributeSurplus", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"distributeSurplus\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("distributeSurplus", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"distributeSurplus\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final election.tally.AbstractBallotCounting receiver$
                        = (election.tally.AbstractBallotCounting) receivers$iter.get();
                    final int candidateWithSurplus
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestDistributeSurplus(receiver$, candidateWithSurplus));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the distributeSurplus method. */
    protected static class TestDistributeSurplus extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument candidateWithSurplus */
        private int candidateWithSurplus;

        /** Initialize this instance. */
        public TestDistributeSurplus(election.tally.AbstractBallotCounting receiver$, int candidateWithSurplus) {
            super("distributeSurplus"+ ":" + candidateWithSurplus);
            this.receiver$ = receiver$;
            this.candidateWithSurplus = candidateWithSurplus;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.distributeSurplus(candidateWithSurplus);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'distributeSurplus' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument candidateWithSurplus: " + this.candidateWithSurplus;
            return msg;
        }
    }

    /** Add tests for the setup method
     * to the overall test suite. */
    private void addTestSuiteFor$TestSetup
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("setup");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("setup", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"setup\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    velection_tally_Constituency$1$iter
                    = this.velection_tally_ConstituencyIter("setup", 0);
                this.check_has_data
                    (velection_tally_Constituency$1$iter,
                     "this.velection_tally_ConstituencyIter(\"setup\", 0)");
                while (!velection_tally_Constituency$1$iter.atEnd()) {
                    final election.tally.AbstractBallotCounting receiver$
                        = (election.tally.AbstractBallotCounting) receivers$iter.get();
                    final election.tally.Constituency constituency
                        = (election.tally.Constituency) velection_tally_Constituency$1$iter.get();
                    methodTests$.addTest
                        (new TestSetup(receiver$, constituency));
                    velection_tally_Constituency$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the setup method. */
    protected static class TestSetup extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument constituency */
        private election.tally.Constituency constituency;

        /** Initialize this instance. */
        public TestSetup(election.tally.AbstractBallotCounting receiver$, election.tally.Constituency constituency) {
            super("setup"+ ":" + (constituency==null? "null" :"{election.tally.Constituency}"));
            this.receiver$ = receiver$;
            this.constituency = constituency;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.setup(constituency);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'setup' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument constituency: " + this.constituency;
            return msg;
        }
    }

    /** Add tests for the load method
     * to the overall test suite. */
    private void addTestSuiteFor$TestLoad
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("load");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("load", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"load\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    velection_tally_BallotBox$1$iter
                    = this.velection_tally_BallotBoxIter("load", 0);
                this.check_has_data
                    (velection_tally_BallotBox$1$iter,
                     "this.velection_tally_BallotBoxIter(\"load\", 0)");
                while (!velection_tally_BallotBox$1$iter.atEnd()) {
                    final election.tally.AbstractBallotCounting receiver$
                        = (election.tally.AbstractBallotCounting) receivers$iter.get();
                    final election.tally.BallotBox ballotBox
                        = (election.tally.BallotBox) velection_tally_BallotBox$1$iter.get();
                    methodTests$.addTest
                        (new TestLoad(receiver$, ballotBox));
                    velection_tally_BallotBox$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the load method. */
    protected static class TestLoad extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument ballotBox */
        private election.tally.BallotBox ballotBox;

        /** Initialize this instance. */
        public TestLoad(election.tally.AbstractBallotCounting receiver$, election.tally.BallotBox ballotBox) {
            super("load"+ ":" + (ballotBox==null? "null" :"{election.tally.BallotBox}"));
            this.receiver$ = receiver$;
            this.ballotBox = ballotBox;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.load(ballotBox);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'load' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument ballotBox: " + this.ballotBox;
            return msg;
        }
    }

    /** Add tests for the getQuota method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetQuota
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getQuota");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("getQuota", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"getQuota\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.AbstractBallotCounting receiver$
                    = (election.tally.AbstractBallotCounting) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetQuota(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getQuota method. */
    protected static class TestGetQuota extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;

        /** Initialize this instance. */
        public TestGetQuota(election.tally.AbstractBallotCounting receiver$) {
            super("getQuota");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getQuota();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getQuota' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the calculateFirstPreferences method
     * to the overall test suite. */
    private void addTestSuiteFor$TestCalculateFirstPreferences
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("calculateFirstPreferences");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("calculateFirstPreferences", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"calculateFirstPreferences\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.AbstractBallotCounting receiver$
                    = (election.tally.AbstractBallotCounting) receivers$iter.get();
                methodTests$.addTest
                    (new TestCalculateFirstPreferences(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the calculateFirstPreferences method. */
    protected static class TestCalculateFirstPreferences extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;

        /** Initialize this instance. */
        public TestCalculateFirstPreferences(election.tally.AbstractBallotCounting receiver$) {
            super("calculateFirstPreferences");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.calculateFirstPreferences();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'calculateFirstPreferences' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the countBallotsFor method
     * to the overall test suite. */
    private void addTestSuiteFor$TestCountBallotsFor
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("countBallotsFor");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("countBallotsFor", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"countBallotsFor\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("countBallotsFor", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"countBallotsFor\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final election.tally.AbstractBallotCounting receiver$
                        = (election.tally.AbstractBallotCounting) receivers$iter.get();
                    final int candidateID
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestCountBallotsFor(receiver$, candidateID));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the countBallotsFor method. */
    protected static class TestCountBallotsFor extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument candidateID */
        private int candidateID;

        /** Initialize this instance. */
        public TestCountBallotsFor(election.tally.AbstractBallotCounting receiver$, int candidateID) {
            super("countBallotsFor"+ ":" + candidateID);
            this.receiver$ = receiver$;
            this.candidateID = candidateID;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.countBallotsFor(candidateID);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'countBallotsFor' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument candidateID: " + this.candidateID;
            return msg;
        }
    }

    /** Add tests for the countFirstPreferences method
     * to the overall test suite. */
    private void addTestSuiteFor$TestCountFirstPreferences
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("countFirstPreferences");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("countFirstPreferences", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"countFirstPreferences\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("countFirstPreferences", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"countFirstPreferences\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final election.tally.AbstractBallotCounting receiver$
                        = (election.tally.AbstractBallotCounting) receivers$iter.get();
                    final int candidateID
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestCountFirstPreferences(receiver$, candidateID));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the countFirstPreferences method. */
    protected static class TestCountFirstPreferences extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument candidateID */
        private int candidateID;

        /** Initialize this instance. */
        public TestCountFirstPreferences(election.tally.AbstractBallotCounting receiver$, int candidateID) {
            super("countFirstPreferences"+ ":" + candidateID);
            this.receiver$ = receiver$;
            this.candidateID = candidateID;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.countFirstPreferences(candidateID);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'countFirstPreferences' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument candidateID: " + this.candidateID;
            return msg;
        }
    }

    /** Add tests for the getPotentialTransfers method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetPotentialTransfers
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getPotentialTransfers");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("getPotentialTransfers", 2));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"getPotentialTransfers\", 2))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    velection_tally_Candidate$1$iter
                    = this.velection_tally_CandidateIter("getPotentialTransfers", 1);
                this.check_has_data
                    (velection_tally_Candidate$1$iter,
                     "this.velection_tally_CandidateIter(\"getPotentialTransfers\", 1)");
                while (!velection_tally_Candidate$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.IntIterator
                        vint$2$iter
                        = this.vintIter("getPotentialTransfers", 0);
                    this.check_has_data
                        (vint$2$iter,
                         "this.vintIter(\"getPotentialTransfers\", 0)");
                    while (!vint$2$iter.atEnd()) {
                        final election.tally.AbstractBallotCounting receiver$
                            = (election.tally.AbstractBallotCounting) receivers$iter.get();
                        final election.tally.Candidate fromCandidate
                            = (election.tally.Candidate) velection_tally_Candidate$1$iter.get();
                        final int toCandidateID
                            = vint$2$iter.getInt();
                        methodTests$.addTest
                            (new TestGetPotentialTransfers(receiver$, fromCandidate, toCandidateID));
                        vint$2$iter.advance();
                    }
                    velection_tally_Candidate$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getPotentialTransfers method. */
    protected static class TestGetPotentialTransfers extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument fromCandidate */
        private election.tally.Candidate fromCandidate;
        /** Argument toCandidateID */
        private int toCandidateID;

        /** Initialize this instance. */
        public TestGetPotentialTransfers(election.tally.AbstractBallotCounting receiver$, election.tally.Candidate fromCandidate, int toCandidateID) {
            super("getPotentialTransfers"+ ":" + (fromCandidate==null? "null" :"{election.tally.Candidate}")+ "," +toCandidateID);
            this.receiver$ = receiver$;
            this.fromCandidate = fromCandidate;
            this.toCandidateID = toCandidateID;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getPotentialTransfers(fromCandidate, toCandidateID);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getPotentialTransfers' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument fromCandidate: " + this.fromCandidate;
            msg += "\n\tArgument toCandidateID: " + this.toCandidateID;
            return msg;
        }
    }

    /** Add tests for the getStatus method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetStatus
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getStatus");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("getStatus", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"getStatus\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.AbstractBallotCounting receiver$
                    = (election.tally.AbstractBallotCounting) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetStatus(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getStatus method. */
    protected static class TestGetStatus extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;

        /** Initialize this instance. */
        public TestGetStatus(election.tally.AbstractBallotCounting receiver$) {
            super("getStatus");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getStatus();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getStatus' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the getNextContinuingPreference method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetNextContinuingPreference
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getNextContinuingPreference");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("getNextContinuingPreference", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"getNextContinuingPreference\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    velection_tally_Ballot$1$iter
                    = this.velection_tally_BallotIter("getNextContinuingPreference", 0);
                this.check_has_data
                    (velection_tally_Ballot$1$iter,
                     "this.velection_tally_BallotIter(\"getNextContinuingPreference\", 0)");
                while (!velection_tally_Ballot$1$iter.atEnd()) {
                    final election.tally.AbstractBallotCounting receiver$
                        = (election.tally.AbstractBallotCounting) receivers$iter.get();
                    final election.tally.Ballot ballot
                        = (election.tally.Ballot) velection_tally_Ballot$1$iter.get();
                    methodTests$.addTest
                        (new TestGetNextContinuingPreference(receiver$, ballot));
                    velection_tally_Ballot$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getNextContinuingPreference method. */
    protected static class TestGetNextContinuingPreference extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument ballot */
        private election.tally.Ballot ballot;

        /** Initialize this instance. */
        public TestGetNextContinuingPreference(election.tally.AbstractBallotCounting receiver$, election.tally.Ballot ballot) {
            super("getNextContinuingPreference"+ ":" + (ballot==null? "null" :"{election.tally.Ballot}"));
            this.receiver$ = receiver$;
            this.ballot = ballot;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getNextContinuingPreference(ballot);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getNextContinuingPreference' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument ballot: " + this.ballot;
            return msg;
        }
    }

    /** Add tests for the isContinuingCandidateID method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsContinuingCandidateID
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isContinuingCandidateID");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("isContinuingCandidateID", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"isContinuingCandidateID\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("isContinuingCandidateID", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"isContinuingCandidateID\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final election.tally.AbstractBallotCounting receiver$
                        = (election.tally.AbstractBallotCounting) receivers$iter.get();
                    final int candidateID
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestIsContinuingCandidateID(receiver$, candidateID));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isContinuingCandidateID method. */
    protected static class TestIsContinuingCandidateID extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument candidateID */
        private int candidateID;

        /** Initialize this instance. */
        public TestIsContinuingCandidateID(election.tally.AbstractBallotCounting receiver$, int candidateID) {
            super("isContinuingCandidateID"+ ":" + candidateID);
            this.receiver$ = receiver$;
            this.candidateID = candidateID;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isContinuingCandidateID(candidateID);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isContinuingCandidateID' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument candidateID: " + this.candidateID;
            return msg;
        }
    }

    /** Add tests for the getActualTransfers method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetActualTransfers
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getActualTransfers");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("getActualTransfers", 2));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"getActualTransfers\", 2))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    velection_tally_Candidate$1$iter
                    = this.velection_tally_CandidateIter("getActualTransfers", 1);
                this.check_has_data
                    (velection_tally_Candidate$1$iter,
                     "this.velection_tally_CandidateIter(\"getActualTransfers\", 1)");
                while (!velection_tally_Candidate$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                        velection_tally_Candidate$2$iter
                        = this.velection_tally_CandidateIter("getActualTransfers", 0);
                    this.check_has_data
                        (velection_tally_Candidate$2$iter,
                         "this.velection_tally_CandidateIter(\"getActualTransfers\", 0)");
                    while (!velection_tally_Candidate$2$iter.atEnd()) {
                        final election.tally.AbstractBallotCounting receiver$
                            = (election.tally.AbstractBallotCounting) receivers$iter.get();
                        final election.tally.Candidate fromCandidate
                            = (election.tally.Candidate) velection_tally_Candidate$1$iter.get();
                        final election.tally.Candidate toCandidate
                            = (election.tally.Candidate) velection_tally_Candidate$2$iter.get();
                        methodTests$.addTest
                            (new TestGetActualTransfers(receiver$, fromCandidate, toCandidate));
                        velection_tally_Candidate$2$iter.advance();
                    }
                    velection_tally_Candidate$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getActualTransfers method. */
    protected static class TestGetActualTransfers extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument fromCandidate */
        private election.tally.Candidate fromCandidate;
        /** Argument toCandidate */
        private election.tally.Candidate toCandidate;

        /** Initialize this instance. */
        public TestGetActualTransfers(election.tally.AbstractBallotCounting receiver$, election.tally.Candidate fromCandidate, election.tally.Candidate toCandidate) {
            super("getActualTransfers"+ ":" + (fromCandidate==null? "null" :"{election.tally.Candidate}")+ "," +(toCandidate==null? "null" :"{election.tally.Candidate}"));
            this.receiver$ = receiver$;
            this.fromCandidate = fromCandidate;
            this.toCandidate = toCandidate;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getActualTransfers(fromCandidate, toCandidate);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getActualTransfers' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument fromCandidate: " + this.fromCandidate;
            msg += "\n\tArgument toCandidate: " + this.toCandidate;
            return msg;
        }
    }

    /** Add tests for the getRoundedFractionalValue method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetRoundedFractionalValue
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getRoundedFractionalValue");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("getRoundedFractionalValue", 2));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"getRoundedFractionalValue\", 2))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    velection_tally_Candidate$1$iter
                    = this.velection_tally_CandidateIter("getRoundedFractionalValue", 1);
                this.check_has_data
                    (velection_tally_Candidate$1$iter,
                     "this.velection_tally_CandidateIter(\"getRoundedFractionalValue\", 1)");
                while (!velection_tally_Candidate$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                        velection_tally_Candidate$2$iter
                        = this.velection_tally_CandidateIter("getRoundedFractionalValue", 0);
                    this.check_has_data
                        (velection_tally_Candidate$2$iter,
                         "this.velection_tally_CandidateIter(\"getRoundedFractionalValue\", 0)");
                    while (!velection_tally_Candidate$2$iter.atEnd()) {
                        final election.tally.AbstractBallotCounting receiver$
                            = (election.tally.AbstractBallotCounting) receivers$iter.get();
                        final election.tally.Candidate fromCandidate
                            = (election.tally.Candidate) velection_tally_Candidate$1$iter.get();
                        final election.tally.Candidate toCandidate
                            = (election.tally.Candidate) velection_tally_Candidate$2$iter.get();
                        methodTests$.addTest
                            (new TestGetRoundedFractionalValue(receiver$, fromCandidate, toCandidate));
                        velection_tally_Candidate$2$iter.advance();
                    }
                    velection_tally_Candidate$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getRoundedFractionalValue method. */
    protected static class TestGetRoundedFractionalValue extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument fromCandidate */
        private election.tally.Candidate fromCandidate;
        /** Argument toCandidate */
        private election.tally.Candidate toCandidate;

        /** Initialize this instance. */
        public TestGetRoundedFractionalValue(election.tally.AbstractBallotCounting receiver$, election.tally.Candidate fromCandidate, election.tally.Candidate toCandidate) {
            super("getRoundedFractionalValue"+ ":" + (fromCandidate==null? "null" :"{election.tally.Candidate}")+ "," +(toCandidate==null? "null" :"{election.tally.Candidate}"));
            this.receiver$ = receiver$;
            this.fromCandidate = fromCandidate;
            this.toCandidate = toCandidate;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getRoundedFractionalValue(fromCandidate, toCandidate);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getRoundedFractionalValue' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument fromCandidate: " + this.fromCandidate;
            msg += "\n\tArgument toCandidate: " + this.toCandidate;
            return msg;
        }
    }

    /** Add tests for the getTransferShortfall method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetTransferShortfall
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getTransferShortfall");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("getTransferShortfall", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"getTransferShortfall\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    velection_tally_Candidate$1$iter
                    = this.velection_tally_CandidateIter("getTransferShortfall", 0);
                this.check_has_data
                    (velection_tally_Candidate$1$iter,
                     "this.velection_tally_CandidateIter(\"getTransferShortfall\", 0)");
                while (!velection_tally_Candidate$1$iter.atEnd()) {
                    final election.tally.AbstractBallotCounting receiver$
                        = (election.tally.AbstractBallotCounting) receivers$iter.get();
                    final election.tally.Candidate fromCandidate
                        = (election.tally.Candidate) velection_tally_Candidate$1$iter.get();
                    methodTests$.addTest
                        (new TestGetTransferShortfall(receiver$, fromCandidate));
                    velection_tally_Candidate$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getTransferShortfall method. */
    protected static class TestGetTransferShortfall extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument fromCandidate */
        private election.tally.Candidate fromCandidate;

        /** Initialize this instance. */
        public TestGetTransferShortfall(election.tally.AbstractBallotCounting receiver$, election.tally.Candidate fromCandidate) {
            super("getTransferShortfall"+ ":" + (fromCandidate==null? "null" :"{election.tally.Candidate}"));
            this.receiver$ = receiver$;
            this.fromCandidate = fromCandidate;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getTransferShortfall(fromCandidate);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getTransferShortfall' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument fromCandidate: " + this.fromCandidate;
            return msg;
        }
    }

    /** Add tests for the randomSelection method
     * to the overall test suite. */
    private void addTestSuiteFor$TestRandomSelection
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("randomSelection");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("randomSelection", 2));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"randomSelection\", 2))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    velection_tally_Candidate$1$iter
                    = this.velection_tally_CandidateIter("randomSelection", 1);
                this.check_has_data
                    (velection_tally_Candidate$1$iter,
                     "this.velection_tally_CandidateIter(\"randomSelection\", 1)");
                while (!velection_tally_Candidate$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                        velection_tally_Candidate$2$iter
                        = this.velection_tally_CandidateIter("randomSelection", 0);
                    this.check_has_data
                        (velection_tally_Candidate$2$iter,
                         "this.velection_tally_CandidateIter(\"randomSelection\", 0)");
                    while (!velection_tally_Candidate$2$iter.atEnd()) {
                        final election.tally.AbstractBallotCounting receiver$
                            = (election.tally.AbstractBallotCounting) receivers$iter.get();
                        final election.tally.Candidate firstCandidate
                            = (election.tally.Candidate) velection_tally_Candidate$1$iter.get();
                        final election.tally.Candidate secondCandidate
                            = (election.tally.Candidate) velection_tally_Candidate$2$iter.get();
                        methodTests$.addTest
                            (new TestRandomSelection(receiver$, firstCandidate, secondCandidate));
                        velection_tally_Candidate$2$iter.advance();
                    }
                    velection_tally_Candidate$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the randomSelection method. */
    protected static class TestRandomSelection extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument firstCandidate */
        private election.tally.Candidate firstCandidate;
        /** Argument secondCandidate */
        private election.tally.Candidate secondCandidate;

        /** Initialize this instance. */
        public TestRandomSelection(election.tally.AbstractBallotCounting receiver$, election.tally.Candidate firstCandidate, election.tally.Candidate secondCandidate) {
            super("randomSelection"+ ":" + (firstCandidate==null? "null" :"{election.tally.Candidate}")+ "," +(secondCandidate==null? "null" :"{election.tally.Candidate}"));
            this.receiver$ = receiver$;
            this.firstCandidate = firstCandidate;
            this.secondCandidate = secondCandidate;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.randomSelection(firstCandidate, secondCandidate);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'randomSelection' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument firstCandidate: " + this.firstCandidate;
            msg += "\n\tArgument secondCandidate: " + this.secondCandidate;
            return msg;
        }
    }

    /** Add tests for the getTransferRemainder method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetTransferRemainder
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getTransferRemainder");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("getTransferRemainder", 2));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"getTransferRemainder\", 2))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    velection_tally_Candidate$1$iter
                    = this.velection_tally_CandidateIter("getTransferRemainder", 1);
                this.check_has_data
                    (velection_tally_Candidate$1$iter,
                     "this.velection_tally_CandidateIter(\"getTransferRemainder\", 1)");
                while (!velection_tally_Candidate$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                        velection_tally_Candidate$2$iter
                        = this.velection_tally_CandidateIter("getTransferRemainder", 0);
                    this.check_has_data
                        (velection_tally_Candidate$2$iter,
                         "this.velection_tally_CandidateIter(\"getTransferRemainder\", 0)");
                    while (!velection_tally_Candidate$2$iter.atEnd()) {
                        final election.tally.AbstractBallotCounting receiver$
                            = (election.tally.AbstractBallotCounting) receivers$iter.get();
                        final election.tally.Candidate fromCandidate
                            = (election.tally.Candidate) velection_tally_Candidate$1$iter.get();
                        final election.tally.Candidate toCandidate
                            = (election.tally.Candidate) velection_tally_Candidate$2$iter.get();
                        methodTests$.addTest
                            (new TestGetTransferRemainder(receiver$, fromCandidate, toCandidate));
                        velection_tally_Candidate$2$iter.advance();
                    }
                    velection_tally_Candidate$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getTransferRemainder method. */
    protected static class TestGetTransferRemainder extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument fromCandidate */
        private election.tally.Candidate fromCandidate;
        /** Argument toCandidate */
        private election.tally.Candidate toCandidate;

        /** Initialize this instance. */
        public TestGetTransferRemainder(election.tally.AbstractBallotCounting receiver$, election.tally.Candidate fromCandidate, election.tally.Candidate toCandidate) {
            super("getTransferRemainder"+ ":" + (fromCandidate==null? "null" :"{election.tally.Candidate}")+ "," +(toCandidate==null? "null" :"{election.tally.Candidate}"));
            this.receiver$ = receiver$;
            this.fromCandidate = fromCandidate;
            this.toCandidate = toCandidate;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getTransferRemainder(fromCandidate, toCandidate);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getTransferRemainder' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument fromCandidate: " + this.fromCandidate;
            msg += "\n\tArgument toCandidate: " + this.toCandidate;
            return msg;
        }
    }

    /** Add tests for the isHigherThan method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsHigherThan
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isHigherThan");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("isHigherThan", 2));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"isHigherThan\", 2))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    velection_tally_Candidate$1$iter
                    = this.velection_tally_CandidateIter("isHigherThan", 1);
                this.check_has_data
                    (velection_tally_Candidate$1$iter,
                     "this.velection_tally_CandidateIter(\"isHigherThan\", 1)");
                while (!velection_tally_Candidate$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                        velection_tally_Candidate$2$iter
                        = this.velection_tally_CandidateIter("isHigherThan", 0);
                    this.check_has_data
                        (velection_tally_Candidate$2$iter,
                         "this.velection_tally_CandidateIter(\"isHigherThan\", 0)");
                    while (!velection_tally_Candidate$2$iter.atEnd()) {
                        final election.tally.AbstractBallotCounting receiver$
                            = (election.tally.AbstractBallotCounting) receivers$iter.get();
                        final election.tally.Candidate firstCandidate
                            = (election.tally.Candidate) velection_tally_Candidate$1$iter.get();
                        final election.tally.Candidate secondCandidate
                            = (election.tally.Candidate) velection_tally_Candidate$2$iter.get();
                        methodTests$.addTest
                            (new TestIsHigherThan(receiver$, firstCandidate, secondCandidate));
                        velection_tally_Candidate$2$iter.advance();
                    }
                    velection_tally_Candidate$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isHigherThan method. */
    protected static class TestIsHigherThan extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument firstCandidate */
        private election.tally.Candidate firstCandidate;
        /** Argument secondCandidate */
        private election.tally.Candidate secondCandidate;

        /** Initialize this instance. */
        public TestIsHigherThan(election.tally.AbstractBallotCounting receiver$, election.tally.Candidate firstCandidate, election.tally.Candidate secondCandidate) {
            super("isHigherThan"+ ":" + (firstCandidate==null? "null" :"{election.tally.Candidate}")+ "," +(secondCandidate==null? "null" :"{election.tally.Candidate}"));
            this.receiver$ = receiver$;
            this.firstCandidate = firstCandidate;
            this.secondCandidate = secondCandidate;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isHigherThan(firstCandidate, secondCandidate);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isHigherThan' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument firstCandidate: " + this.firstCandidate;
            msg += "\n\tArgument secondCandidate: " + this.secondCandidate;
            return msg;
        }
    }

    /** Add tests for the getOrder method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetOrder
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getOrder");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("getOrder", 2));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"getOrder\", 2))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    velection_tally_Candidate$1$iter
                    = this.velection_tally_CandidateIter("getOrder", 1);
                this.check_has_data
                    (velection_tally_Candidate$1$iter,
                     "this.velection_tally_CandidateIter(\"getOrder\", 1)");
                while (!velection_tally_Candidate$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                        velection_tally_Candidate$2$iter
                        = this.velection_tally_CandidateIter("getOrder", 0);
                    this.check_has_data
                        (velection_tally_Candidate$2$iter,
                         "this.velection_tally_CandidateIter(\"getOrder\", 0)");
                    while (!velection_tally_Candidate$2$iter.atEnd()) {
                        final election.tally.AbstractBallotCounting receiver$
                            = (election.tally.AbstractBallotCounting) receivers$iter.get();
                        final election.tally.Candidate fromCandidate
                            = (election.tally.Candidate) velection_tally_Candidate$1$iter.get();
                        final election.tally.Candidate toCandidate
                            = (election.tally.Candidate) velection_tally_Candidate$2$iter.get();
                        methodTests$.addTest
                            (new TestGetOrder(receiver$, fromCandidate, toCandidate));
                        velection_tally_Candidate$2$iter.advance();
                    }
                    velection_tally_Candidate$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getOrder method. */
    protected static class TestGetOrder extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument fromCandidate */
        private election.tally.Candidate fromCandidate;
        /** Argument toCandidate */
        private election.tally.Candidate toCandidate;

        /** Initialize this instance. */
        public TestGetOrder(election.tally.AbstractBallotCounting receiver$, election.tally.Candidate fromCandidate, election.tally.Candidate toCandidate) {
            super("getOrder"+ ":" + (fromCandidate==null? "null" :"{election.tally.Candidate}")+ "," +(toCandidate==null? "null" :"{election.tally.Candidate}"));
            this.receiver$ = receiver$;
            this.fromCandidate = fromCandidate;
            this.toCandidate = toCandidate;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getOrder(fromCandidate, toCandidate);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getOrder' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument fromCandidate: " + this.fromCandidate;
            msg += "\n\tArgument toCandidate: " + this.toCandidate;
            return msg;
        }
    }

    /** Add tests for the compareCandidates method
     * to the overall test suite. */
    private void addTestSuiteFor$TestCompareCandidates
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("compareCandidates");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("compareCandidates", 5));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"compareCandidates\", 5))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    velection_tally_Candidate$1$iter
                    = this.velection_tally_CandidateIter("compareCandidates", 4);
                this.check_has_data
                    (velection_tally_Candidate$1$iter,
                     "this.velection_tally_CandidateIter(\"compareCandidates\", 4)");
                while (!velection_tally_Candidate$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                        velection_tally_Candidate$2$iter
                        = this.velection_tally_CandidateIter("compareCandidates", 3);
                    this.check_has_data
                        (velection_tally_Candidate$2$iter,
                         "this.velection_tally_CandidateIter(\"compareCandidates\", 3)");
                    while (!velection_tally_Candidate$2$iter.atEnd()) {
                        org.jmlspecs.jmlunit.strategies.IntIterator
                            vint$3$iter
                            = this.vintIter("compareCandidates", 2);
                        this.check_has_data
                            (vint$3$iter,
                             "this.vintIter(\"compareCandidates\", 2)");
                        while (!vint$3$iter.atEnd()) {
                            org.jmlspecs.jmlunit.strategies.IntIterator
                                vint$4$iter
                                = this.vintIter("compareCandidates", 1);
                            this.check_has_data
                                (vint$4$iter,
                                 "this.vintIter(\"compareCandidates\", 1)");
                            while (!vint$4$iter.atEnd()) {
                                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                                    velection_tally_Candidate$5$iter
                                    = this.velection_tally_CandidateIter("compareCandidates", 0);
                                this.check_has_data
                                    (velection_tally_Candidate$5$iter,
                                     "this.velection_tally_CandidateIter(\"compareCandidates\", 0)");
                                while (!velection_tally_Candidate$5$iter.atEnd()) {
                                    final election.tally.AbstractBallotCounting receiver$
                                        = (election.tally.AbstractBallotCounting) receivers$iter.get();
                                    final election.tally.Candidate fromCandidate
                                        = (election.tally.Candidate) velection_tally_Candidate$1$iter.get();
                                    final election.tally.Candidate firstCandidate
                                        = (election.tally.Candidate) velection_tally_Candidate$2$iter.get();
                                    final int transfersToFirst
                                        = vint$3$iter.getInt();
                                    final int firstTransferRemainder
                                        = vint$4$iter.getInt();
                                    final election.tally.Candidate secondCandidate
                                        = (election.tally.Candidate) velection_tally_Candidate$5$iter.get();
                                    methodTests$.addTest
                                        (new TestCompareCandidates(receiver$, fromCandidate, firstCandidate, transfersToFirst, firstTransferRemainder, secondCandidate));
                                    velection_tally_Candidate$5$iter.advance();
                                }
                                vint$4$iter.advance();
                            }
                            vint$3$iter.advance();
                        }
                        velection_tally_Candidate$2$iter.advance();
                    }
                    velection_tally_Candidate$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the compareCandidates method. */
    protected static class TestCompareCandidates extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument fromCandidate */
        private election.tally.Candidate fromCandidate;
        /** Argument firstCandidate */
        private election.tally.Candidate firstCandidate;
        /** Argument transfersToFirst */
        private int transfersToFirst;
        /** Argument firstTransferRemainder */
        private int firstTransferRemainder;
        /** Argument secondCandidate */
        private election.tally.Candidate secondCandidate;

        /** Initialize this instance. */
        public TestCompareCandidates(election.tally.AbstractBallotCounting receiver$, election.tally.Candidate fromCandidate, election.tally.Candidate firstCandidate, int transfersToFirst, int firstTransferRemainder, election.tally.Candidate secondCandidate) {
            super("compareCandidates"+ ":" + (fromCandidate==null? "null" :"{election.tally.Candidate}")+ "," +(firstCandidate==null? "null" :"{election.tally.Candidate}")+ "," +transfersToFirst+ "," +firstTransferRemainder+ "," +(secondCandidate==null? "null" :"{election.tally.Candidate}"));
            this.receiver$ = receiver$;
            this.fromCandidate = fromCandidate;
            this.firstCandidate = firstCandidate;
            this.transfersToFirst = transfersToFirst;
            this.firstTransferRemainder = firstTransferRemainder;
            this.secondCandidate = secondCandidate;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.compareCandidates(fromCandidate, firstCandidate, transfersToFirst, firstTransferRemainder, secondCandidate);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'compareCandidates' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument fromCandidate: " + this.fromCandidate;
            msg += "\n\tArgument firstCandidate: " + this.firstCandidate;
            msg += "\n\tArgument transfersToFirst: " + this.transfersToFirst;
            msg += "\n\tArgument firstTransferRemainder: " + this.firstTransferRemainder;
            msg += "\n\tArgument secondCandidate: " + this.secondCandidate;
            return msg;
        }
    }

    /** Add tests for the getTotalTransferableVotes method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetTotalTransferableVotes
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getTotalTransferableVotes");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("getTotalTransferableVotes", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"getTotalTransferableVotes\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    velection_tally_Candidate$1$iter
                    = this.velection_tally_CandidateIter("getTotalTransferableVotes", 0);
                this.check_has_data
                    (velection_tally_Candidate$1$iter,
                     "this.velection_tally_CandidateIter(\"getTotalTransferableVotes\", 0)");
                while (!velection_tally_Candidate$1$iter.atEnd()) {
                    final election.tally.AbstractBallotCounting receiver$
                        = (election.tally.AbstractBallotCounting) receivers$iter.get();
                    final election.tally.Candidate fromCandidate
                        = (election.tally.Candidate) velection_tally_Candidate$1$iter.get();
                    methodTests$.addTest
                        (new TestGetTotalTransferableVotes(receiver$, fromCandidate));
                    velection_tally_Candidate$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getTotalTransferableVotes method. */
    protected static class TestGetTotalTransferableVotes extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument fromCandidate */
        private election.tally.Candidate fromCandidate;

        /** Initialize this instance. */
        public TestGetTotalTransferableVotes(election.tally.AbstractBallotCounting receiver$, election.tally.Candidate fromCandidate) {
            super("getTotalTransferableVotes"+ ":" + (fromCandidate==null? "null" :"{election.tally.Candidate}"));
            this.receiver$ = receiver$;
            this.fromCandidate = fromCandidate;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getTotalTransferableVotes(fromCandidate);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getTotalTransferableVotes' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument fromCandidate: " + this.fromCandidate;
            return msg;
        }
    }

    /** Add tests for the transferVotes method
     * to the overall test suite. */
    private void addTestSuiteFor$TestTransferVotes
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("transferVotes");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("transferVotes", 3));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"transferVotes\", 3))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    velection_tally_Candidate$1$iter
                    = this.velection_tally_CandidateIter("transferVotes", 2);
                this.check_has_data
                    (velection_tally_Candidate$1$iter,
                     "this.velection_tally_CandidateIter(\"transferVotes\", 2)");
                while (!velection_tally_Candidate$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                        velection_tally_Candidate$2$iter
                        = this.velection_tally_CandidateIter("transferVotes", 1);
                    this.check_has_data
                        (velection_tally_Candidate$2$iter,
                         "this.velection_tally_CandidateIter(\"transferVotes\", 1)");
                    while (!velection_tally_Candidate$2$iter.atEnd()) {
                        org.jmlspecs.jmlunit.strategies.IntIterator
                            vint$3$iter
                            = this.vintIter("transferVotes", 0);
                        this.check_has_data
                            (vint$3$iter,
                             "this.vintIter(\"transferVotes\", 0)");
                        while (!vint$3$iter.atEnd()) {
                            final election.tally.AbstractBallotCounting receiver$
                                = (election.tally.AbstractBallotCounting) receivers$iter.get();
                            final election.tally.Candidate fromCandidate
                                = (election.tally.Candidate) velection_tally_Candidate$1$iter.get();
                            final election.tally.Candidate toCandidate
                                = (election.tally.Candidate) velection_tally_Candidate$2$iter.get();
                            final int numberOfVotes
                                = vint$3$iter.getInt();
                            methodTests$.addTest
                                (new TestTransferVotes(receiver$, fromCandidate, toCandidate, numberOfVotes));
                            vint$3$iter.advance();
                        }
                        velection_tally_Candidate$2$iter.advance();
                    }
                    velection_tally_Candidate$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the transferVotes method. */
    protected static class TestTransferVotes extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument fromCandidate */
        private election.tally.Candidate fromCandidate;
        /** Argument toCandidate */
        private election.tally.Candidate toCandidate;
        /** Argument numberOfVotes */
        private int numberOfVotes;

        /** Initialize this instance. */
        public TestTransferVotes(election.tally.AbstractBallotCounting receiver$, election.tally.Candidate fromCandidate, election.tally.Candidate toCandidate, int numberOfVotes) {
            super("transferVotes"+ ":" + (fromCandidate==null? "null" :"{election.tally.Candidate}")+ "," +(toCandidate==null? "null" :"{election.tally.Candidate}")+ "," +numberOfVotes);
            this.receiver$ = receiver$;
            this.fromCandidate = fromCandidate;
            this.toCandidate = toCandidate;
            this.numberOfVotes = numberOfVotes;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.transferVotes(fromCandidate, toCandidate, numberOfVotes);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'transferVotes' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument fromCandidate: " + this.fromCandidate;
            msg += "\n\tArgument toCandidate: " + this.toCandidate;
            msg += "\n\tArgument numberOfVotes: " + this.numberOfVotes;
            return msg;
        }
    }

    /** Add tests for the findHighestCandidate method
     * to the overall test suite. */
    private void addTestSuiteFor$TestFindHighestCandidate
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("findHighestCandidate");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("findHighestCandidate", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"findHighestCandidate\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.AbstractBallotCounting receiver$
                    = (election.tally.AbstractBallotCounting) receivers$iter.get();
                methodTests$.addTest
                    (new TestFindHighestCandidate(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the findHighestCandidate method. */
    protected static class TestFindHighestCandidate extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;

        /** Initialize this instance. */
        public TestFindHighestCandidate(election.tally.AbstractBallotCounting receiver$) {
            super("findHighestCandidate");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.findHighestCandidate();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'findHighestCandidate' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the findLowestCandidate method
     * to the overall test suite. */
    private void addTestSuiteFor$TestFindLowestCandidate
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("findLowestCandidate");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("findLowestCandidate", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"findLowestCandidate\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.AbstractBallotCounting receiver$
                    = (election.tally.AbstractBallotCounting) receivers$iter.get();
                methodTests$.addTest
                    (new TestFindLowestCandidate(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the findLowestCandidate method. */
    protected static class TestFindLowestCandidate extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;

        /** Initialize this instance. */
        public TestFindLowestCandidate(election.tally.AbstractBallotCounting receiver$) {
            super("findLowestCandidate");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.findLowestCandidate();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'findLowestCandidate' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the eliminateCandidate method
     * to the overall test suite. */
    private void addTestSuiteFor$TestEliminateCandidate
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("eliminateCandidate");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("eliminateCandidate", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"eliminateCandidate\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("eliminateCandidate", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"eliminateCandidate\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final election.tally.AbstractBallotCounting receiver$
                        = (election.tally.AbstractBallotCounting) receivers$iter.get();
                    final int loser
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestEliminateCandidate(receiver$, loser));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the eliminateCandidate method. */
    protected static class TestEliminateCandidate extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument loser */
        private int loser;

        /** Initialize this instance. */
        public TestEliminateCandidate(election.tally.AbstractBallotCounting receiver$, int loser) {
            super("eliminateCandidate"+ ":" + loser);
            this.receiver$ = receiver$;
            this.loser = loser;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.eliminateCandidate(loser);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'eliminateCandidate' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument loser: " + this.loser;
            return msg;
        }
    }

    /** Add tests for the makeDecision method
     * to the overall test suite. */
    private void addTestSuiteFor$TestMakeDecision
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("makeDecision");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("makeDecision", 2));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"makeDecision\", 2))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.ByteIterator
                    vbyte$1$iter
                    = this.vbyteIter("makeDecision", 1);
                this.check_has_data
                    (vbyte$1$iter,
                     "this.vbyteIter(\"makeDecision\", 1)");
                while (!vbyte$1$iter.atEnd()) {
                    org.jmlspecs.jmlunit.strategies.IntIterator
                        vint$2$iter
                        = this.vintIter("makeDecision", 0);
                    this.check_has_data
                        (vint$2$iter,
                         "this.vintIter(\"makeDecision\", 0)");
                    while (!vint$2$iter.atEnd()) {
                        final election.tally.AbstractBallotCounting receiver$
                            = (election.tally.AbstractBallotCounting) receivers$iter.get();
                        final byte decisionType
                            = vbyte$1$iter.getByte();
                        final int candidateID
                            = vint$2$iter.getInt();
                        methodTests$.addTest
                            (new TestMakeDecision(receiver$, decisionType, candidateID));
                        vint$2$iter.advance();
                    }
                    vbyte$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the makeDecision method. */
    protected static class TestMakeDecision extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument decisionType */
        private byte decisionType;
        /** Argument candidateID */
        private int candidateID;

        /** Initialize this instance. */
        public TestMakeDecision(election.tally.AbstractBallotCounting receiver$, byte decisionType, int candidateID) {
            super("makeDecision"+ ":" + decisionType+ "," +candidateID);
            this.receiver$ = receiver$;
            this.decisionType = decisionType;
            this.candidateID = candidateID;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.makeDecision(decisionType, candidateID);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'makeDecision' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument decisionType: " + this.decisionType;
            msg += "\n\tArgument candidateID: " + this.candidateID;
            return msg;
        }
    }

    /** Add tests for the redistributeBallots method
     * to the overall test suite. */
    private void addTestSuiteFor$TestRedistributeBallots
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("redistributeBallots");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("redistributeBallots", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"redistributeBallots\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("redistributeBallots", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"redistributeBallots\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final election.tally.AbstractBallotCounting receiver$
                        = (election.tally.AbstractBallotCounting) receivers$iter.get();
                    final int candidateID
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestRedistributeBallots(receiver$, candidateID));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the redistributeBallots method. */
    protected static class TestRedistributeBallots extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument candidateID */
        private int candidateID;

        /** Initialize this instance. */
        public TestRedistributeBallots(election.tally.AbstractBallotCounting receiver$, int candidateID) {
            super("redistributeBallots"+ ":" + candidateID);
            this.receiver$ = receiver$;
            this.candidateID = candidateID;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.redistributeBallots(candidateID);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'redistributeBallots' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument candidateID: " + this.candidateID;
            return msg;
        }
    }

    /** Add tests for the transferBallot method
     * to the overall test suite. */
    private void addTestSuiteFor$TestTransferBallot
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("transferBallot");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("transferBallot", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"transferBallot\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                    velection_tally_Ballot$1$iter
                    = this.velection_tally_BallotIter("transferBallot", 0);
                this.check_has_data
                    (velection_tally_Ballot$1$iter,
                     "this.velection_tally_BallotIter(\"transferBallot\", 0)");
                while (!velection_tally_Ballot$1$iter.atEnd()) {
                    final election.tally.AbstractBallotCounting receiver$
                        = (election.tally.AbstractBallotCounting) receivers$iter.get();
                    final election.tally.Ballot ballot
                        = (election.tally.Ballot) velection_tally_Ballot$1$iter.get();
                    methodTests$.addTest
                        (new TestTransferBallot(receiver$, ballot));
                    velection_tally_Ballot$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the transferBallot method. */
    protected static class TestTransferBallot extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument ballot */
        private election.tally.Ballot ballot;

        /** Initialize this instance. */
        public TestTransferBallot(election.tally.AbstractBallotCounting receiver$, election.tally.Ballot ballot) {
            super("transferBallot"+ ":" + (ballot==null? "null" :"{election.tally.Ballot}"));
            this.receiver$ = receiver$;
            this.ballot = ballot;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.transferBallot(ballot);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'transferBallot' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument ballot: " + this.ballot;
            return msg;
        }
    }

    /** Add tests for the count method
     * to the overall test suite. */
    private void addTestSuiteFor$TestCount
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("count");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("count", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"count\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.AbstractBallotCounting receiver$
                    = (election.tally.AbstractBallotCounting) receivers$iter.get();
                methodTests$.addTest
                    (new TestCount(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the count method. */
    protected static class TestCount extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;

        /** Initialize this instance. */
        public TestCount(election.tally.AbstractBallotCounting receiver$) {
            super("count");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.count();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'count' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the electCandidate method
     * to the overall test suite. */
    private void addTestSuiteFor$TestElectCandidate
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("electCandidate");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("electCandidate", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"electCandidate\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("electCandidate", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"electCandidate\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final election.tally.AbstractBallotCounting receiver$
                        = (election.tally.AbstractBallotCounting) receivers$iter.get();
                    final int winner
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestElectCandidate(receiver$, winner));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the electCandidate method. */
    protected static class TestElectCandidate extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;
        /** Argument winner */
        private int winner;

        /** Initialize this instance. */
        public TestElectCandidate(election.tally.AbstractBallotCounting receiver$, int winner) {
            super("electCandidate"+ ":" + winner);
            this.receiver$ = receiver$;
            this.winner = winner;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.electCandidate(winner);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'electCandidate' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument winner: " + this.winner;
            return msg;
        }
    }

    /** Add tests for the getNumberContinuing method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetNumberContinuing
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getNumberContinuing");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractBallotCountingIter("getNumberContinuing", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractBallotCountingIter(\"getNumberContinuing\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.AbstractBallotCounting receiver$
                    = (election.tally.AbstractBallotCounting) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetNumberContinuing(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getNumberContinuing method. */
    protected static class TestGetNumberContinuing extends OneTest {
        /** The receiver */
        private election.tally.AbstractBallotCounting receiver$;

        /** Initialize this instance. */
        public TestGetNumberContinuing(election.tally.AbstractBallotCounting receiver$) {
            super("getNumberContinuing");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getNumberContinuing();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getNumberContinuing' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Check that the iterator is non-null and not empty. */
    private void
    check_has_data(org.jmlspecs.jmlunit.strategies.IndefiniteIterator iter,
                   String call)
    {
        if (iter == null) {
            junit.framework.Assert.fail(call + " returned null");
        }
        if (iter.atEnd()) {
            junit.framework.Assert.fail(call + " returned an empty iterator");
        }
    }

    /** Converts a char to a printable String for display */
    public static String charToString(char c) {
        if (c == '\n') {
            return "NL";
        } else if (c == '\r') {
            return "CR";
        } else if (c == '\t') {
            return "TAB";
        } else if (Character.isISOControl(c)) {
            int i = (int)c;
            return "\\u"
                    + Character.forDigit((i/2048)%16,16)
                    + Character.forDigit((i/256)%16,16)
                    + Character.forDigit((i/16)%16,16)
                    + Character.forDigit((i)%16,16);
        }
        return Character.toString(c);
    }
}
