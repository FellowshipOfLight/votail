// This file was generated by jmlunit on Fri Dec 11 21:58:12 GMT 2009.

package election.tally;

/** Automatically-generated test driver for JML and JUnit based
 * testing of AbstractCountStatus. The superclass of this class should be edited
 * to supply test data. However it's best not to edit this class
 * directly; instead use the command
 * <pre>
 *  jmlunit AbstractCountStatus.java
 * </pre>
 * to regenerate this class whenever AbstractCountStatus.java changes.
 */
public class AbstractCountStatus_JML_Test
     extends AbstractCountStatus_JML_TestData
{
    /** Initialize this class. */
    public AbstractCountStatus_JML_Test(java.lang.String name) {
        super(name);
    }

    /** Run the tests. */
    public static void main(java.lang.String[] args) {
        org.jmlspecs.jmlunit.JMLTestRunner.run(suite());
        // You can also use a JUnit test runner such as:
        // junit.textui.TestRunner.run(suite());
    }

    /** Test to see if the code for class AbstractCountStatus
     * has been compiled with runtime assertion checking (i.e., by jmlc).
     * Code that is not compiled with jmlc would not make an effective test,
     * since no assertion checking would be done. */
    public void test$IsRACCompiled() {
        junit.framework.Assert.assertTrue("code for class AbstractCountStatus"
                + " was not compiled with jmlc"
                + " so no assertions will be checked!",
            org.jmlspecs.jmlrac.runtime.JMLChecker.isRACCompiled(AbstractCountStatus.class)
            );
    }

    /** Return the test suite for this test class.  This will have
    * added to it at least test$IsRACCompiled(), and any test methods
    * written explicitly by the user in the superclass.  It will also
    * have added test suites for each testing each method and
    * constructor.
    */
    //@ ensures \result != null;
    public static junit.framework.Test suite() {
        AbstractCountStatus_JML_Test testobj
            = new AbstractCountStatus_JML_Test("AbstractCountStatus_JML_Test");
        junit.framework.TestSuite testsuite = testobj.overallTestSuite();
        // Add instances of Test found by the reflection mechanism.
        testsuite.addTestSuite(AbstractCountStatus_JML_Test.class);
        testobj.addTestSuiteForEachMethod(testsuite);
        return testsuite;
    }

    /** A JUnit test object that can run a single test method.  This
     * is defined as a nested class solely for convenience; it can't
     * be defined once and for all because it must subclass its
     * enclosing class.
     */
    protected static abstract class OneTest extends AbstractCountStatus_JML_Test {

        /** Initialize this test object. */
        public OneTest(String name) {
            super(name);
        }

        /** The result object that holds information about testing. */
        protected junit.framework.TestResult result;

        //@ also
        //@ requires result != null;
        public void run(junit.framework.TestResult result) {
            this.result = result;
            super.run(result);
        }

        /* Run a single test and decide whether the test was
         * successful, meaningless, or a failure.  This is the
         * Template Method pattern abstraction of the inner loop in a
         * JML/JUnit test. */
        public void runTest() throws java.lang.Throwable {
            try {
                // The call being tested!
                doCall();
            }
            catch (org.jmlspecs.jmlrac.runtime.JMLEntryPreconditionError e) {
                // meaningless test input
                addMeaningless();
            } catch (org.jmlspecs.jmlrac.runtime.JMLAssertionError e) {
                // test failure
                int l = org.jmlspecs.jmlrac.runtime.JMLChecker.getLevel();
                org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel
                    (org.jmlspecs.jmlrac.runtime.JMLOption.NONE);
                try {
                    java.lang.String failmsg = this.failMessage(e);
                    junit.framework.AssertionFailedError err
                        = new junit.framework.AssertionFailedError(failmsg);
                    err.setStackTrace(new java.lang.StackTraceElement[]{});
                    err.initCause(e);
                    result.addFailure(this, err);
                } finally {
                    org.jmlspecs.jmlrac.runtime.JMLChecker.setLevel(l);
                }
            } catch (java.lang.Throwable e) {
                // test success
            }
        }

        /** Call the method to be tested with the appropriate arguments. */
        protected abstract void doCall() throws java.lang.Throwable;

        /** Format the error message for a test failure, based on the
         * method's arguments. */
        protected abstract java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e);

        /** Inform listeners that a meaningless test was run. */
        private void addMeaningless() {
            if (result instanceof org.jmlspecs.jmlunit.JMLTestResult) {
                ((org.jmlspecs.jmlunit.JMLTestResult)result)
                    .addMeaningless(this);
            }
        }
    }

    /** Create the tests that are to be run for testing the class
     * AbstractCountStatus.  The framework will then run them.
     * @param overallTestSuite$ The suite accumulating all of the tests
     * for this driver class.
     */
    //@ requires overallTestSuite$ != null;
    public void addTestSuiteForEachMethod
        (junit.framework.TestSuite overallTestSuite$)
    {
        try {
            this.addTestSuiteFor$TestGetState(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestChangeState(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
        try {
            this.addTestSuiteFor$TestIsPossibleState(overallTestSuite$);
        } catch (java.lang.Throwable ex) {
            overallTestSuite$.addTest
                (new org.jmlspecs.jmlunit.strategies.ConstructorFailed(ex));
        }
    }

    /** Add tests for the getState method
     * to the overall test suite. */
    private void addTestSuiteFor$TestGetState
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("getState");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractCountStatusIter("getState", 0));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractCountStatusIter(\"getState\", 0))");
            while (!receivers$iter.atEnd()) {
                final election.tally.AbstractCountStatus receiver$
                    = (election.tally.AbstractCountStatus) receivers$iter.get();
                methodTests$.addTest
                    (new TestGetState(receiver$));
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the getState method. */
    protected static class TestGetState extends OneTest {
        /** The receiver */
        private election.tally.AbstractCountStatus receiver$;

        /** Initialize this instance. */
        public TestGetState(election.tally.AbstractCountStatus receiver$) {
            super("getState");
            this.receiver$ = receiver$;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.getState();
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'getState' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            return msg;
        }
    }

    /** Add tests for the changeState method
     * to the overall test suite. */
    private void addTestSuiteFor$TestChangeState
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("changeState");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractCountStatusIter("changeState", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractCountStatusIter(\"changeState\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("changeState", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"changeState\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final election.tally.AbstractCountStatus receiver$
                        = (election.tally.AbstractCountStatus) receivers$iter.get();
                    final int newState
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestChangeState(receiver$, newState));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the changeState method. */
    protected static class TestChangeState extends OneTest {
        /** The receiver */
        private election.tally.AbstractCountStatus receiver$;
        /** Argument newState */
        private int newState;

        /** Initialize this instance. */
        public TestChangeState(election.tally.AbstractCountStatus receiver$, int newState) {
            super("changeState"+ ":" + newState);
            this.receiver$ = receiver$;
            this.newState = newState;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.changeState(newState);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'changeState' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument newState: " + this.newState;
            return msg;
        }
    }

    /** Add tests for the isPossibleState method
     * to the overall test suite. */
    private void addTestSuiteFor$TestIsPossibleState
        (junit.framework.TestSuite overallTestSuite$)
    {
        junit.framework.TestSuite methodTests$
            = this.emptyTestSuiteFor("isPossibleState");
        try {
            org.jmlspecs.jmlunit.strategies.IndefiniteIterator
                receivers$iter
                = new org.jmlspecs.jmlunit.strategies.NonNullIteratorDecorator
                    (this.velection_tally_AbstractCountStatusIter("isPossibleState", 1));
            this.check_has_data
                (receivers$iter,
                 "new NonNullIteratorDecorator(this.velection_tally_AbstractCountStatusIter(\"isPossibleState\", 1))");
            while (!receivers$iter.atEnd()) {
                org.jmlspecs.jmlunit.strategies.IntIterator
                    vint$1$iter
                    = this.vintIter("isPossibleState", 0);
                this.check_has_data
                    (vint$1$iter,
                     "this.vintIter(\"isPossibleState\", 0)");
                while (!vint$1$iter.atEnd()) {
                    final election.tally.AbstractCountStatus receiver$
                        = (election.tally.AbstractCountStatus) receivers$iter.get();
                    final int value
                        = vint$1$iter.getInt();
                    methodTests$.addTest
                        (new TestIsPossibleState(receiver$, value));
                    vint$1$iter.advance();
                }
                receivers$iter.advance();
            }
        } catch (org.jmlspecs.jmlunit.strategies.TestSuiteFullException e$) {
            // methodTests$ doesn't want more tests
        }
        overallTestSuite$.addTest(methodTests$);
    }

    /** Test for the isPossibleState method. */
    protected static class TestIsPossibleState extends OneTest {
        /** The receiver */
        private election.tally.AbstractCountStatus receiver$;
        /** Argument value */
        private int value;

        /** Initialize this instance. */
        public TestIsPossibleState(election.tally.AbstractCountStatus receiver$, int value) {
            super("isPossibleState"+ ":" + value);
            this.receiver$ = receiver$;
            this.value = value;
        }

        protected void doCall() throws java.lang.Throwable {
            receiver$.isPossibleState(value);
        }

        protected java.lang.String failMessage
            (org.jmlspecs.jmlrac.runtime.JMLAssertionError e$)
        {
            java.lang.String msg = "\n\tMethod 'isPossibleState' applied to";
            msg += "\n\tReceiver: " + this.receiver$;
            msg += "\n\tArgument value: " + this.value;
            return msg;
        }
    }

    /** Check that the iterator is non-null and not empty. */
    private void
    check_has_data(org.jmlspecs.jmlunit.strategies.IndefiniteIterator iter,
                   String call)
    {
        if (iter == null) {
            junit.framework.Assert.fail(call + " returned null");
        }
        if (iter.atEnd()) {
            junit.framework.Assert.fail(call + " returned an empty iterator");
        }
    }

    /** Converts a char to a printable String for display */
    public static String charToString(char c) {
        if (c == '\n') {
            return "NL";
        } else if (c == '\r') {
            return "CR";
        } else if (c == '\t') {
            return "TAB";
        } else if (Character.isISOControl(c)) {
            int i = (int)c;
            return "\\u"
                    + Character.forDigit((i/2048)%16,16)
                    + Character.forDigit((i/256)%16,16)
                    + Character.forDigit((i/16)%16,16)
                    + Character.forDigit((i)%16,16);
        }
        return Character.toString(c);
    }
}
